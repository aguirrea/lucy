<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>BubbleRob tutorial</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1>External controller tutorial</h1>

<p>There are several ways one can control a robot or simulation in V-REP: </p>
<li>The most convenient way is to write a <a href="childScripts.htm">child script</a> that will handle the behaviour of a given robot or <a href="models.htm">model</a>. It is the most convenient way, because child scripts are directly attached to <a href="objects.htm">scene objects</a>, they will be duplicated together with their associated scene objects, they do not need any compilation with an external tool, they can run in <a href="childScripts.htm#threaded">threaded</a> or <a href="childScripts.htm#nonThreaded">non-threaded</a> mode, they can be extended via <a href="apiFunctionListCategory.htm#customizingLuaFunctions">custom Lua function</a> or via a <a href="http://luaforge.net/projects/">Lua extension library</a>. Another major advantage in using child scripts: there is no communication lag as with the last 3 methods mentioned in this section (i.e. the <a href="apiOverview.htm">regular API</a> is used), and child scripts are part of the application main thread (inherent synchronous operation). There are several drawback to writing scripts however: you don't have the choice of the programming language, you can't have the fastest code, and you can't directly access external function libraries, except the Lua extension libraries.</li>
<br>
<li> Another way one can control a robot or a simulation is by writing a <a href="plugins.htm">plugin</a>. The plugin mechanism allows for callback mechanisms, <a href="apiFunctionListCategory.htm#customizingLuaFunctions">custom Lua function registration</a>, and of course access to external function libraries. A plugin is often used in conjunction with child scripts (e.g. the plugin registers custom Lua functions, that, when called from a child script, will call back a specific plugin function). A major advantage in using plugins is also that  there is no communication lag as with the last 3 methods mentioned in this section (i.e. the <a href="apiOverview.htm">regular API</a> is used), and that a plugin is part of the application main thread (inherent synchronous operation). The drawbacks with plugins are: they are more complicated to program, and they need to be compiled with an external too. Refer also to the <a href="pluginTutorial.htm">plugin tutorial</a>.</li>
<br>
<li> A third  way one can control a robot or a simulation is by writing an external client application that relies on the <a href="remoteApiOverview.htm">remote API</a>. This is a very convenient and easy way, if you need to run the control code from an external application, from a robot or from another computer. This also allows you to control a simulation or a <a href="models.htm">model</a> (e.g. a virtual robot) with the exact same code as the one that runs the real robot. The remote API functionality relies on the remote API plugin (on the server side), and the remote API code on the client side. Both programs/projects are open source (i.e. can be easily extended or translated for support of other languages) and can be found in the 'programming' directory of V-REP's installation. Currently there are seven supported languages: <a href="remoteApiFunctions.htm">C/C++</a>, <a href="remoteApiFunctionsPython.htm">Python</a>, <a href="remoteApiFunctionsJava.htm">Java</a>, <a href="remoteApiFunctionsMatlab.htm">Matlab</a>, <a href="remoteApiFunctionsOctave.htm">Octave</a>, <a href="remoteApiFunctionsLua.htm">Lua</a> and <a href="remoteApiFunctionsUrbi.htm">Urbi</a>.</li>
<br>


<li>A forth way to control a robot or a simulation is via a <a href="http://www.ros.org">ROS</a> node. In a similar way as the <a href="remoteApiOverview.htm">remote API</a>, ROS is a convenient way to have several distributed processes communicate with each other. While the remote API is very lightweight and fast, it allows only communication with V-REP. ROS on the other hand allows connecting virtually any number of processes with each other, and a large amount of compatible libraries are available. It is however heavier and more complicated than the remote API. Refer to the <a href="rosInterfaces.htm">ROS interfaces</a> for details.</li>
<br>


<li>A fifth way to control a robot or a simulation is by writing an external application that communicates via various means (e.g. pipes, sockets, serial port, etc.) with a V-REP plugin or V-REP script. Two major advantages are the choice of programming language, which can be just any language, and the flexibility. Here also, the control code can run on a robot, or a different computer. This way of controlling a simulation or a model is however more tedious that the method with the <a href="remoteApiOverview.htm">remote API</a>.</li>
<br>



<p>The V-REP scene file related to this tutorial is &quot;controlTypeExamples.ttt&quot; located in V-REP's &quot;scenes&quot; folder. Open the scene and run the simulation:<br>
</p>

<p align=center><img src="images/externalControllerTut1.jpg"></p>
<br>

<p>The simulation illustrates the 5 control types previously mentioned: the orange robot is controlled by  an embedded child script, the blue robot is controlled by a plugin, the purple robot is controlled via the remote API and an external client application, the red robots are controlled via 2 external ROS applications,  and the green robot is controlled by an external server application via a custom socket communication. In all 5 cases, <a href="childScripts.htm">child scripts</a> are used, mainly to make the link with the outside world (e.g. launch the correct client application, and pass the correct object handles to it). There are two other ways one can control a robot, a simulation, or the simulator itself: by using <a href="customizationScripts.htm">customization scripts</a>, or <a href="addOns.htm">add-ons</a>. They are however not recommended for control and should be rather used to handle functionality while simulation is not running.</p>

<p>As an example, the child script linked to the purple robot has following main tasks:</p>
<li>Search for a free socket connection port</li>
<li>Start a remote API server service on the above port</li>
<li>Launch the controller application (&quot;bubbleRobClient&quot;) with the chosen connection port and some object handles as argument</li>



<p>As another example, the child script linked to the red robot has following main tasks:</p>
<li>Check if the <a href="rosInterf.htm">RosInterface</a> for V-REP was loaded</li>
<li>Launch the controller application (&quot;rosBubbleRob2&quot;) with some topic names or object handles as arguments</li>

<p>Yet, as another example, the child script linked to the green robot has following main tasks:</p>
<li>Search for a free socket connection port</li>
<li>Launch the controller application (&quot;bubbleRobServer&quot;) with the chosen connection port as argument</li>
<li>Locally connect to the controller application</li>
<li>At each simulation pass, send the sensor values to the controller, and read the desired motor values from the controller</li>
<li>At each simulation pass, apply the desired motor values to the robot's joints</li>

<p>
The project files for the &quot;bubbleRobClient&quot;, &quot;rosBubbleRob&quot;, &quot;rosBubbleRob2&quot;, and &quot;bubbleRobServer&quot; applications are located in V-REP's installation folder &quot;programming&quot;.</p>
<p>Run the simulation, and copy-and-paste all robots: you will see that the duplicated robots will directly be operational, since their attached child scripts are in charge of launching new instances of &quot;bubbleRobClient&quot;, &quot;rosBubbleRob2&quot;, &quot;bubbleRobServer&quot;, or calling the appropriate plugin Lua extension function.</p>

<p>Finally, notice that the green robot is controlled via &quot;bubbleRobServer&quot;, but that its child script acts as client that communicates with the server. You could also imagine having the client part not inside of a child script, but inside of a plugin. Such an example is illustrated in the <a href="robotLanguageIntegrationTutorial.htm">robot language interpreter integration tutorial</a>. </p>

<p><br>
</p>
<br>
<br>

 </tr>
</table> 
</div>  
  
  
</body>

</html>
