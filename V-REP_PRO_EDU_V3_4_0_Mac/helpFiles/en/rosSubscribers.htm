<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>RosPlugin subscribers</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1><a href="rosInterfaceOverview.htm">RosPlugin</a> subscribers</h1>

<a name="dataStreamingInfo" id="dataStreamingInfo"></a>

<p>While <a href="rosServices.htm">RosPlugin services in V-REP</a> are enabled as soon as V-REP starts (given that ROSCORE was running at that time), <a href="rosSubscriberTypes.htm">RosPlugin topic subscription and listening to streaming data</a> happens only on demand (i.e. subscribers need to be individually enabled). Moreover, this can only happen while a simulation is running.</p>
<p>V-REP offers two equivalent means of enabling and disabling RosPlugin subscribers: via the <a href="rosServices.htm#simRosEnableSubscriber">simRosEnableSubscriber</a> and <a href="rosServices.htm#simRosDisableSubscriber">simRosDisableSubscriber</a> services, or via <a href="#customLuaCmds">custom Lua commands</a> that can be used from within a <a href="scripts.htm">script</a>. In either case a topic name, a command ID and 3 <strong>enabling parameters</strong> need to be provided:</p>
<li>The topic name will be the string under which streaming data will be listened to (e.g. &quot;robotPosition&quot;)</li>
<li>The command ID (hereafter streamCmd) specifies  the type of data that we wish to set in V-REP (e.g. <a href="rosSubscriberTypes.htm#simros_strmcmd_set_object_pose">simros_strmcmd_set_object_pose</a> if we wish to set an object's position and orientation using the data from the stream)</li>
<li>The 3 enabling parameters fully specify the item upon which the data should be applied (e.g. if we want to set the joint position of a joint object,  then one enabling parameter will be the object handle, while the 2 other parameters will not be used. The first 2 parameters are integer values, the third parameter is a string value. Most of the time only one parameter is required for a streamCmd, sometimes none, and othertimes 2.</li>

<p>If you wish to activate/deactivate topic subscription via a Lua script, then following 2 functions will be needed:</p>



<a name="customLuaCmds" id="customLuaCmds"></a>
<h3 class=tab><a name="simExtROS_enableSubscriber" id="simExtROS_enableSubscriber"></a>simExtROS_enableSubscriber</h3>
<table class=apiTableTab>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>
Enables a subscriber (i.e. V-REP will be listening to streaming data on a specific topic). Subscribers can only be enabled while simulation is running.  Publishers can be disabled with <a href="#simExtROS_disableSubscriber">simExtROS_disableSubscriber</a>. At simulation end, all subscribers are automatically disabled. A subscriber can also be enabled using following ROS service: <a href="rosServices.htm#simRosEnableSubscriber">simRosEnableSubscriber</a>. See also <a href="rosPublishers.htm#simExtROS_enablePublisher">simExtROS_enablePublisher</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua synopsis
</td> 
<td class=apiTableRightLSyn>number subscriberID=simExtROS_enableSubscriber(string topicName,number queueSize,number streamCmd,number auxInt1,number auxInt2,string auxString,number callbackTag_before=-1,number callbackTag_after=-1)<br></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua parameters</td> 
<td class=apiTableRightLParam>
<div><strong>topicName</strong>: the topic name to listen to</div>
<div><strong>queueSize</strong>: the desired queue size</div>
<div><strong>streamCmd</strong>: the desired <a href="rosSubscriberTypes.htm">type of data to stream</a></div>
<div><strong>auxInt1</strong>: the first enabling parameter.</div>
<div><strong>auxInt2</strong>: the second enabling parameter</div>
<div><strong>auxString</strong>: the third enabling parameter</div>
<div><strong>callbackTag_before</strong>: specify a value>=0 if you wish to trigger a call to the <a href="generalCallbackScript.htm">general callback script</a> everytime a message arrives. Return a value>0 from the general callback script, if you want the message to be processed, otherwise return 0. This argument can be omitted, in which case the message will be automatically processed without triggering a callback call to the general callback script.</div>
<div><strong>callbackTag_after</strong>: specify a value>=0 if you wish to trigger a call to the <a href="generalCallbackScript.htm">general callback script</a> everytime a message has arrived and been processed. This argument can be omitted, in which case no callback call will be triggered in the general callback script once a message has been processed.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua return values
</td> 
<td class=apiTableRightLRet>
<div><strong>subscriberID</strong>: a subscriber ID, or -1 in case of an error. The subscriber ID is needed to disable that subscriber with <a href="#simExtROS_disableSubscriber">simExtROS_disableSubscriber</a>.</div>
<div></div></td> 
</tr> 
</table> 
<br>








<h3 class=tab><a name="simExtROS_disableSubscriber" id="simExtROS_disableSubscriber"></a>simExtROS_disableSubscriber</h3>
<table class=apiTableTab>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>
Disables a subscriber (i.e. V-REP will stop listening to a  specific topic) previously enabled with <a href="#simExtROS_enableSubscriber">simExtROS_enableSubscriber</a>.  At simulation end, all subscribers are automatically disabled. A subscriber can also be disabled using following ROS service: <a href="rosServices.htm#simRosDisableSubscriber">simRosDisableSubscriber</a>. See also <a href="rosPublishers.htm#simExtROS_disablePublisher">simExtROS_disablePublisher</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua synopsis
</td> 
<td class=apiTableRightLSyn>boolean result=simExtROS_disableSubscriber(number subscriberID)<br></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua parameters</td> 
<td class=apiTableRightLParam>
<div><strong>subscriberID</strong>: the subscriber ID previously returned by <a href="#simExtROS_enableSubscriber">simExtROS_enableSubscriber</a>.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua return values
</td> 
<td class=apiTableRightLRet>
<div><strong>result</strong>: false if there was an error.</div>
<div></div></td> 
</tr> 
</table> 
<br>














<p>As an example, imagine you wish to activate subscription of the topic &quot;myObjectPose&quot; that is streaming pose data, and you wish to apply that pose data to the object  &quot;myObject&quot;. Then  you could write following code in a Lua script:</p>


 <pre class=lightRedBox>
local handle=simGetObjectHandle('myObject')
local subscriberID=simExtROS_enableSubscriber('myObjectPose',1,
                            simros_strmcmd_set_object_pose,handle,-1,'')</pre>


<p>The above example can also be executed directly in the console:</p>

<pre class=lightGreyBox>
$ rosservice call vrep/simRosGetObjectHandle 'myObject'
handle: 5
$ rosservice call vrep/simRosEnableSubscriber 'myObjectPose' 1 10243 5 -- -1 ''
subscriberID: 0</pre>

<p>The first line retrieves the object handle (i.e. 5), and the second line enables listening and setting of the desired data. '10243' is the value of the variable simros_strmcmd_set_object_pose defined in the file 'programming/include/v_repConst.h'</p>



<p>You can have V-REP act as publisher and subscriber at the same time. For instance, following code (to be executed just once at simulation start) will automatically match object &quot;myObject2&quot;'s pose with the pose of &quot;myObject1&quot;, as long as the simulation is running:</p>


 <pre class=lightRedBox>
local object1Handle=simGetObjectHandle('myObject1')
local effectiveTopicName=simExtROS_enablePublisher('myObjectPose',1,
                            simros_strmcmd_get_object_pose,object1Handle,-1,'')

local object2Handle=simGetObjectHandle('myObject2')
local subscriberID=simExtROS_enableSubscriber(effectiveTopicName,1
                            simros_strmcmd_set_object_pose,object2Handle,-1,'')</pre>






<br>
<h3 class=recommendedTopics>Recommended topics</h3>
<li><a href="rosSubscriberTypes.htm">RosPlugin subscriber types</a></li>
<li><a href="rosPublishers.htm">RosPlugin publishers</a></li>
<li><a href="rosServices.htm">RosPlugin services</a></li>








<br>
<br>
</td>
</tr>
</table> 
</div>  
  
  
</body>

</html>
