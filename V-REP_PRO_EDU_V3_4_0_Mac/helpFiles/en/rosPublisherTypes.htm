<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>RosPlugin publisher types</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1><a href="rosInterfaceOverview.htm">RosPlugin</a> publisher types</h1>



<h3 class=subsectionBar>
<a name="simros_strmcmd_get_and_clear_string_signal" id="simros_strmcmd_get_and_clear_string_signal"></a>streamCmd: simros_strmcmd_get_and_clear_string_signal
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of a string signal. The signal is cleared after each post. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetAndClearStringSignal">simRosGetAndClearStringSignal</a>)  for details. See also <a href="rosPublisherTypes.htm#simros_strmcmd_get_string_signal">simros_strmcmd_get_string_signal</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: (not used, set to -1)</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: signal name</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>std_msgs::String</strong>: the desired signal value</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_array_parameter" id="simros_strmcmd_get_array_parameter"></a>streamCmd: simros_strmcmd_get_array_parameter
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of an array parameter. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetArrayParameter">simRosGetArrayParameter</a>)  for details. See also <a href="rosSubscriberTypes.htm#simros_strmcmd_set_array_parameter">simros_strmcmd_set_array_parameter</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: an <a href="apiConstants.htm#arrayParameters">array parameter identifier</a></div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>geometry_msgs::Point32</strong>: the desired array values</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simros_strmcmd_get_boolean_parameter" id="simros_strmcmd_get_boolean_parameter"></a>streamCmd: simros_strmcmd_get_boolean_parameter
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of a Boolean parameter. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetBooleanParameter">simRosGetBooleanParameter</a>)  for details. See also <a href="rosSubscriberTypes.htm#simros_strmcmd_set_boolean_parameter">simros_strmcmd_set_boolean_parameter</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: a <a href="apiConstants.htm#booleanParameters">Boolean parameter identifier</a></div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>std_msgs::UInt8</strong>: the desired Boolean value</div>
</td> 
</tr> 
</table> 
<br>











<h3 class=subsectionBar>
<a name="simros_strmcmd_get_depth_sensor_data" id="simros_strmcmd_get_depth_sensor_data"></a>streamCmd: simros_strmcmd_get_depth_sensor_data
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of <a href="visionSensors.htm">vision sensor</a> depth data (point cloud data). See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also <a href="#simros_strmcmd_get_range_finder_data">simros_strmcmd_get_range_finder_data</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the handle of a <a href="visionSensors.htm">vision sensor</a>. See also <a href="rosServices.htm#simRosGetObjectHandle">simRosGetObjectHandle</a>.</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>sensor_msgs::PointCloud2</strong>: the point cloud data</div>
</td> 
</tr> 
</table> 
<br>





























<h3 class=subsectionBar>
<a name="simros_strmcmd_get_dialog_result" id="simros_strmcmd_get_dialog_result"></a>streamCmd: simros_strmcmd_get_dialog_result
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of a dialog's result value. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetDialogResult">simRosGetDialogResult</a>)  for details. </td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: handle of a generic dialog (return value of <a href="rosServices.htm#simRosDisplayDialog">simRosDisplayDialog</a>)</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>std_msgs::Int32</strong>: a <a href="apiConstants.htm#genericDialogReturnValues">dialog result value</a></div>
</td> 
</tr> 
</table> 
<br>









<h3 class=subsectionBar>
<a name="simros_strmcmd_get_floating_parameter" id="simros_strmcmd_get_floating_parameter"></a>streamCmd: simros_strmcmd_get_floating_parameter
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of a floating parameter. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetFloatingParameter">simRosGetFloatingParameter</a>)  for details. See also <a href="rosSubscriberTypes.htm#simros_strmcmd_set_floating_parameter">simros_strmcmd_set_floating_parameter</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: a <a href="apiConstants.htm#floatingParameters">floating parameter identifier</a></div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>std_msgs::Float32</strong>: the desired float value</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_float_signal" id="simros_strmcmd_get_float_signal"></a>streamCmd: simros_strmcmd_get_float_signal
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of a float signal. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetFloatSignal">simRosGetFloatSignal</a>)  for details. See also <a href="rosSubscriberTypes.htm#simros_strmcmd_set_float_signal">simros_strmcmd_set_float_signal</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: (not used, set to -1)</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: the signal name</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>std_msgs::Float32</strong>: the desired signal value</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_info" id="simros_strmcmd_get_info"></a>topic name: info
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>The topic <em>info</em> is an exception: it will start streaming data as long as V-REP is running (i.e. a publisher for that topic does not need to be activated). Simulator state information will be streamed under that topic. See also the service equivalent (<a href="rosServices.htm#simRosGetInfo">simRosGetInfo</a>)  for details. </td>
</tr> 


<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>vrep_common::VrepInfo::headerInfo (Header)</strong>: header information</div>
<div><strong>vrep_common::VrepInfo::simulatorState (Int32)</strong>: the simulator state, bit-coded:</div>
<div class=tab>bit0 set: simulation not stopped</div>
<div class=tab>bit1 set: simulation paused</div>
<div class=tab>bit2 set: real-time switch on</div>
<div class=tab>bit3-bit5: the edit mode type (0=no edit mode, 1=triangle, 2=vertex, 3=edge, 4=path, 5=UI)</div>
<div><strong>vrep_common::VrepInfo::simulatonTime (Float32)</strong>: the simulation time</div>
<div><strong>vrep_common::VrepInfo::timeStep (Float32)</strong>: the simulation time step</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_integer_parameter" id="simros_strmcmd_get_integer_parameter"></a>streamCmd: simros_strmcmd_get_integer_parameter
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of an integer parameter. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetIntegerParameter">simRosGetIntegerParameter</a>)  for details. See also <a href="rosSubscriberTypes.htm#simros_strmcmd_set_integer_parameter">simros_strmcmd_set_integer_parameter</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: an <a href="apiConstants.htm#integerParameters">integer parameter identifier</a></div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>std_msgs::Int32</strong>: the desired value</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_integer_signal" id="simros_strmcmd_get_integer_signal"></a>streamCmd: simros_strmcmd_get_integer_signal
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of an integer signal. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetIntegerSignal">simRosGetIntegerSignal</a>)  for details. See also <a href="rosSubscriberTypes.htm#simros_strmcmd_set_integer_signal">simros_strmcmd_set_integer_signal</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: (not used, set to -1)</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: signal name</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>std_msgs::Int32</strong>: the desired signal value</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_joint_state" id="simros_strmcmd_get_joint_state"></a>streamCmd: simros_strmcmd_get_joint_state
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of joint state(s): position, velocity and force/torque data. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetJointState">simRosGetJointState</a>)  for details. See also <a href="rosSubscriberTypes.htm#simros_strmcmd_set_joint_state">simros_strmcmd_set_joint_state</a>, <a href="rosSubscriberTypes.htm#simros_strmcmd_set_joint_position">simros_strmcmd_set_joint_position</a>, <a href="rosSubscriberTypes.htm#simros_strmcmd_set_joint_force">simros_strmcmd_set_joint_force</a>, <a href="rosSubscriberTypes.htm#simros_strmcmd_set_joint_target_position">simros_strmcmd_set_joint_target_position</a>, and <a href="rosSubscriberTypes.htm#simros_strmcmd_set_joint_target_velocity">simros_strmcmd_set_joint_target_velocity</a> and <a href="#simros_strmcmd_get_object_group_data">simros_strmcmd_get_object_group_data</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the joint handle, or sim_handle_all to stream information about all joints in the scene. See also <a href="rosServices.htm#simRosGetObjectHandle">simRosGetObjectHandle</a>.</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>sensor_msgs::JointState</strong>: the joint state. Refer to the ROS documentation</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_laser_scanner_data" id="simros_strmcmd_get_laser_scanner_data"></a>streamCmd: simros_strmcmd_get_laser_scanner_data
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of laser scanner data. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the handle of an object the laser data relates to. See also <a href="rosServices.htm#simRosGetObjectHandle">simRosGetObjectHandle</a>.</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: a string signal that contains scan data. For n scanned points, the string signal should contain n distance values, the minimum scan angle, the maximum scan angle, and the angular variation between consecutive scan angles. From an <a href="childScripts.htm">child script</a>, you can use following construction:</div>

<pre class=lightRedBoxNoMarginAndSmall>
if (sim_call_type==sim_childscriptcall_initialization) then
    -- following only once, in the initialization phase:
    simExtROS_enablePublisher('topicName',1,simros_strmcmd_get_laser_scanner_data,
                                                           objHandle,-1,'mySignal')
end

if (sim_call_type==sim_childscriptcall_sensing) then
    -- following in each simulation pass (update the scan data):
    values={}
    for i=1,n,1 do
        distanceValueForPointN=math.random()
        table.insert(values,distanceValueForPointN)
    end
    table.insert(values,minAngle)<br>table.insert(values,maxAngle)
    table.insert(values,stepSize)
    simSetStringSignal('mySignal',simPackFloats(values))
end</pre>


</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>sensor_msgs::LaserScan</strong>: the laser scan data</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_object_float_parameter" id="simros_strmcmd_get_object_float_parameter"></a>streamCmd: simros_strmcmd_get_object_float_parameter
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of an object float parameter. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetObjectFloatParameter">simRosGetObjectFloatParameter</a>)  for details. See also <a href="rosSubscriberTypes.htm#simros_strmcmd_set_object_float_parameter">simros_strmcmd_set_object_float_parameter</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the object handle. See also <a href="rosServices.htm#simRosGetObjectHandle">simRosGetObjectHandle</a>.</div>
<div><strong>auxInt2</strong>: identifier of the parameter to retrieve. See the <a href="objectParameterIDs.htm">list of all possible object parameter identifiers</a></div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>std_msgs::Float32</strong>: the desired parameter value</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_object_group_data" id="simros_strmcmd_get_object_group_data"></a>streamCmd: simros_strmcmd_get_object_group_data
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of various data from a group of objects. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetObjectGroupData">simRosGetObjectGroupData</a>) for details. </td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: a <a href="apiConstants.htm#sceneObjectTypes">scene object type</a>, sim_appobj_object_type for all <a href="objects.htm">scene objects</a>, or a <a href="rosServices.htm#simRosGetCollectionHandle">collection</a> handle.</div>
<div><strong>auxInt2</strong>: the type of data that is desired: </div>
<div class=tab>0: retrieves the object names (in stringData.)</div>
<div class=tab>1: retrieves the <a href="apiConstants.htm#sceneObjectTypes">object types</a> (in intData)</div>
<div class=tab>2: retrieves the parent object handles (in intData)</div>
<div class=tab>3: retrieves the absolute object positions (in floatData. There are 3 values for each object (x,y,z))</div>
<div class=tab>4: retrieves the local object positions (in floatData. There are 3 values for each object (x,y,z))</div>
<div class=tab>5: retrieves the absolute object orientations as <a href="eulerAngles.htm">Euler angles</a> (in floatData. There are 3 values for each object (alpha,beta,gamma))</div>
<div class=tab>6: retrieves the local object orientations as <a href="eulerAngles.htm">Euler angles</a> (in floatData. There are 3 values for each object (alpha,beta,gamma))</div>
<div class=tab>7: retrieves the absolute object orientations as quaternions (in floatData. There are 4 values for each object (qx,qy,qz,qw))</div>
<div class=tab>8: retrieves the local object orientations as quaternions (in floatData. There are 4 values for each object (qx,qy,qz,qw))</div>
<div class=tab>9: retrieves the absolute object positions and orientations (as <a href="eulerAngles.htm">Euler angles</a>) (in floatData. There are 6 values for each object (x,y,z,alpha,beta,gamma))</div>
<div class=tab>10: retrieves the local object positions and orientations (as <a href="eulerAngles.htm">Euler angles</a>) (in floatData. There are 6 values for each object (x,y,z,alpha,beta,gamma))</div>
<div class=tab>11: retrieves the absolute object positions and orientations (as quaternions) (in floatData. There are 7 values for each object (x,y,z,qx,qy,qz,qw))</div>
<div class=tab>12: retrieves the local object positions and orientations (as quaternions) (in floatData. There are 7 values for each object (x,y,z,qx,qy,qz,qw))</div>
<div class=tab>13: retrieves proximity sensor data (in intData (2 values): detection state, detected object handle. In floatData (6 values): detected point (x,y,z) and detected surface normal (nx,ny,nz))</div>
<div class=tab>14: retrieves force sensor data (in intData (1 values): force sensor state. In floatData (6 values): force (fx,fy,fz) and torque (tx,ty,tz))</div>
<div class=tab>15: retrieves joint state data (in floatData (2 values): position, force/torque)</div>
<div class=tab>16: retrieves joint properties data (in intData (2 values): joint type, joint mode (bit16=hybid operation). In floatData (2 values): joint limit low, joint range (-1.0 if joint is cyclic))</div>
<div class=tab>17: retrieves the object linear velocity (in floatData. There are 3 values for each object (vx,vy,vz))</div>
<div class=tab>18: retrieves the object angular velocity as <a href="eulerAngles.htm">Euler angles</a> per seconds (in floatData. There are 3 values for each object (dAlpha,dBeta,dGamma))</div>
<div class=tab>19: retrieves the object linear and angular velocity (i.e. twist data) (in floatData. There are 6 values for each object (vx,vy,vz,dAlpha,dBeta,dGamma))</div>

<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>vrep_common::ObjectGroupData::handles (Int32MultiArray)</strong>: the object handles</div>
<div><strong>vrep_common::ObjectGroupData::intData (Int32MultiArray)</strong>: the integer data</div>
<div><strong>vrep_common::ObjectGroupData::floatData (Float32MultiArray)</strong>: the float data</div>
<div><strong>vrep_common::ObjectGroupData::stringData (String)</strong>: the strings, each separated with the zero-char ('\0').</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_object_int_parameter" id="simros_strmcmd_get_object_int_parameter"></a>streamCmd: simros_strmcmd_get_object_int_parameter
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of an object's integer parameter. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetObjectIntParameter">simRosGetObjectIntParameter</a>)  for details. See also <a href="rosSubscriberTypes.htm#simros_strmcmd_set_object_int_parameter">simros_strmcmd_set_object_int_parameter</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the object handle. See also <a href="rosServices.htm#simRosGetObjectHandle">simRosGetObjectHandle</a>.</div>
<div><strong>auxInt2</strong>: identifier of the parameter to retrieve. See the <a href="objectParameterIDs.htm">list of all possible object parameter identifiers</a></div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>std_msgs::Int32</strong>: the desired parameter value</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_object_parent" id="simros_strmcmd_get_object_parent"></a>streamCmd: simros_strmcmd_get_object_parent
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of an object's parent handle. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetObjectParent">simRosGetObjectParent</a>)  for details. See also <a href="#simros_strmcmd_get_object_group_data">simros_strmcmd_get_object_group_data</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the object handle. See also <a href="rosServices.htm#simRosGetObjectHandle">simRosGetObjectHandle</a>.</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>std_msgs::Int32</strong>: the handle of the parent object, or -1 if the object has no parent</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_object_pose" id="simros_strmcmd_get_object_pose"></a>streamCmd: simros_strmcmd_get_object_pose
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of an object's pose. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetObjectPose">simRosGetObjectPose</a>)  for details. See also <a href="rosSubscriberTypes.htm#simros_strmcmd_set_object_pose">simros_strmcmd_set_object_pose</a> and <a href="#simros_strmcmd_get_object_group_data">simros_strmcmd_get_object_group_data</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the object handle. See also <a href="rosServices.htm#simRosGetObjectHandle">simRosGetObjectHandle</a>.</div>
<div><strong>auxInt2</strong>: a value indicating relative to which reference frame we want the pose.   Specify -1 to retrieve the absolute pose, sim_handle_parent to   retrieve the pose relative to the object's parent, or an object   handle relative to whose reference frame you want the pose</div>
<div><strong>auxString</strong>: the frame_id for the message.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>geometry_msgs::PoseStamped</strong>: the pose data. Refer to the ROS documentation</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_objects" id="simros_strmcmd_get_objects"></a>streamCmd: simros_strmcmd_get_objects
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of object handles in the scene, according to their type. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetObjects">simRosGetObjects</a>)  for details. See also <a href="#simros_strmcmd_get_object_group_data">simros_strmcmd_get_object_group_data</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the desired <a href="apiConstants.htm#sceneObjectTypes">object type</a> (sim_object_shape_type, sim_object_joint_type, etc., or sim_handle_all for any type of object</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>std_msgs::Int32MultiArray</strong>: the desired object handles</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_object_selection" id="simros_strmcmd_get_object_selection"></a>streamCmd: simros_strmcmd_get_object_selection
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of selected object handles (i.e. handles of object that are in a selected state in the scene). See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetObjectSelection">simRosGetObjectSelection</a>)  for details. See also <a href="rosSubscriberTypes.htm#simros_strmcmd_set_object_selection">simros_strmcmd_set_object_selection</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: (not used, set to -1)</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>std_msgs::</strong><strong>Int32MultiArray</strong>: the handles of selected objects</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_odom_data" id="simros_strmcmd_get_odom_data"></a>streamCmd: simros_strmcmd_get_odom_data
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of odometry data. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the handle of an object, e.g. the base or reference frame of a robot. See also <a href="rosServices.htm#simRosGetObjectHandle">simRosGetObjectHandle</a>.</div>
<div><strong>auxInt2</strong>: the handle of an object you are calculating the odometry frame (usually 'world', which would be -1).</div>
<div><strong>auxString</strong>: a string containing 72 values which specify the covariance matrices for the position and orientation of the odometry, in row-major order. The matrices are actually 2 6x6 matrices. See <a href="http://docs.ros.org/api/nav_msgs/html/msg/Odometry.html">here</a> for the definition of the odometry msg. If you input and empty string, then the covar matrices are zero.</div>
<br>
<div>What the odometry publisher does, is that it ouputs perfect odometric data for the robot's pose (and velocity). Of course in real applications the odometry should be computed using an odometry model e.g. the kinematics for the diff drive robot, using input from wheel encoders. </div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>nav_msgs::Odometry</strong>: the odometry data</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_range_finder_data" id="simros_strmcmd_get_range_finder_data"></a>streamCmd: simros_strmcmd_get_range_finder_data
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of range finder data (point cloud data). See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also <a href="#simros_strmcmd_get_depth_sensor_data">simros_strmcmd_get_depth_sensor_data</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the handle of an object representing the sensor (doesn't need to be a sensor). See also <a href="rosServices.htm#simRosGetObjectHandle">simRosGetObjectHandle</a>.</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: name of the string signal that contains point data. Refer also to <a href="regularApi/simSetStringSignal.htm">simSetStringSignal</a>. The string signal should contain a succession of points, where each point contains 3 coordinates (x, y and z). Each coordinate is a float (4 chars). From an <a href="scripts.htm">embedded script</a>, you can use following construction:</div>

<pre class=lightRedBoxNoMarginAndSmall>
-- example for 3 points:
local points={pt1x,pt1y,pt1z,pt2x,pt2y,pt2z,pt3x,pt3y,pt3z}
local signalData=simPackFloats(points)
simSetStringSignal(signalName,signalData)</pre>


</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>sensor_msgs::PointCloud2</strong>: the point cloud data</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_string_parameter" id="simros_strmcmd_get_string_parameter"></a>streamCmd: simros_strmcmd_get_string_parameter
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of a string parameter. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetStringParameter">simRosGetStringParameter</a>)  for details. </td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: a <a href="apiConstants.htm#stringParameters">string parameter identifier</a></div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>std_msgs::String</strong>: the desired parameter value</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_string_signal" id="simros_strmcmd_get_string_signal"></a>streamCmd: simros_strmcmd_get_string_signal
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of a string signal. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetStringSignal">simRosGetStringSignal</a>)  for details. See also <a href="rosSubscriberTypes.htm#simros_strmcmd_set_string_signal">simros_strmcmd_set_string_signal</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: (not used, set to -1)</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: signal name</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>std_msgs::String</strong>: the desired signal value</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_transform" id="simros_strmcmd_get_transform"></a>streamCmd: simros_strmcmd_get_transform
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables a tf broadcaster, that lets the user keep track of multiple coordinate frames over time. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. </td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the object handle. See also <a href="rosServices.htm#simRosGetObjectHandle">simRosGetObjectHandle</a>.</div>
<div><strong>auxInt2</strong>: a value indicating relative to which reference frame we want the transform.   Specify -1 to retrieve the absolute transform, sim_handle_parent to   retrieve the transform relative to the object's parent, or an object   handle relative to whose reference frame you want the transform</div>
<div><strong>auxString</strong>: can be an empty string, or can be used to specify the names, in case the objects do not correspond to the exact names we want to use in frame_ids. Syntax is: child_name%parent_name</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>geometry_msgs::TransformStamped</strong>: the transform</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_twist_status" id="simros_strmcmd_get_twist_status"></a>streamCmd: simros_strmcmd_get_twist_status
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of twist data. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also <a href="rosSubscriberTypes.htm#simros_strmcmd_set_twist_command">simros_strmcmd_set_twist_command</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the handle of an object the twist data relates to. See also <a href="rosServices.htm#simRosGetObjectHandle">simRosGetObjectHandle</a>.</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: if an empty string is specified (default usage), then twist data of the above specified object is streamed. Otherwise you can stream customized data. In that case, the string represents the name of a signal that contains the twist data to stream. Refer also to <a href="regularApi/simSetStringSignal.htm">simSetStringSignal</a>. The string signal should contain a succession of 6 float values  (6*4 chars). From an <a href="scripts.htm">embedded script</a>, you can use following construction:</div>

<pre class=lightRedBoxNoMarginAndSmall>
local twist={a,b,c,d,e,f}
local signalData=simPackFloats(twist)
simSetStringSignal(signalName,signalData)</pre>


</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>geometry_msgs::TwistStamped</strong>: the twist data</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_ui_button_property" id="simros_strmcmd_get_ui_button_property"></a>streamCmd: simros_strmcmd_get_ui_button_property
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of a UI button's property (e.g. down/up state, etc.). See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetUIButtonProperty">simRosGetUIButtonProperty</a>)  for details. See also <a href="rosSubscriberTypes.htm#simros_strmcmd_set_ui_button_property">simros_strmcmd_set_ui_button_property</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the handle of the UI. See also <a href="rosServices.htm#simRosGetUIHandle">simRosGetUIHandle</a>.</div>
<div><strong>auxInt2</strong>: the button ID</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>std_msgs::Int32</strong>: the desired property value</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_ui_event_button" id="simros_strmcmd_get_ui_event_button"></a>streamCmd: simros_strmcmd_get_ui_event_button
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of events that occured in a specific UI. Data is only streamed if an event occured. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetUIEventButton">simRosGetUIEventButton</a>)  for details. </td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the handle of the UI. See also <a href="rosServices.htm#simRosGetUIHandle">simRosGetUIHandle</a>.</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>std_msgs::Int32MultiArray</strong>: 3 values:</div>
<div class=tab>value1: button ID of the UI button where an event occured</div>
<div class=tab>value2: the <a href="apiConstants.htm#uiButtonProperties">button property</a></div>
<div class=tab>value3: for sliders: slider state (0-1000), for stay down buttons: down state (0 or 1), for up/down event buttons: up/down events (0 or 1)</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_ui_slider" id="simros_strmcmd_get_ui_slider"></a>streamCmd: simros_strmcmd_get_ui_slider
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of the position of a UI slider button. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetUISlider">simRosGetUISlider</a>)  for details. See also <a href="rosSubscriberTypes.htm#simros_strmcmd_set_ui_slider">simros_strmcmd_set_ui_slider</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the handle of the UI. See also <a href="rosServices.htm#simRosGetUIHandle">simRosGetUIHandle</a>.</div>
<div><strong>auxInt2</strong>: the button ID</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>std_msgs::Int32</strong>: the slider position (value between 0 and 1000)</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_vision_sensor_depth_buffer" id="simros_strmcmd_get_vision_sensor_depth_buffer"></a>streamCmd: simros_strmcmd_get_vision_sensor_depth_buffer
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of the depth buffer values of a vision sensor. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetVisionSensorDepthBuffer">simRosGetVisionSensorDepthBuffer</a>)  for details. </td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the vision sensor handle. See also <a href="rosServices.htm#simRosGetObjectHandle">simRosGetObjectHandle</a>.</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>vrep_common::VisionSensorDepthBuff::x (Int32)</strong>: the sensor's x-resolution</div>
<div><strong>vrep_common::VisionSensorDepthBuff::y (Int32)</strong>: the sensor's y-resolution</div>
<div><strong>vrep_common::VisionSensorDepthBuff::data (Float32MultiArray)</strong>: the depth values. Values are in the range of 0-1 (0=closest to sensor, 1=farthest from sensor).</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_vision_sensor_image" id="simros_strmcmd_get_vision_sensor_image"></a>streamCmd: simros_strmcmd_get_vision_sensor_image
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of the image of a vision sensor. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosGetVisionSensorImage">simRosGetVisionSensorImage</a>)  for details. See also <a href="rosSubscriberTypes.htm#simros_strmcmd_set_vision_sensor_image">simros_strmcmd_set_vision_sensor_image</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the vision sensor handle. See also <a href="rosServices.htm#simRosGetObjectHandle">simRosGetObjectHandle</a>.</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>sensor_msgs::Image</strong>: the image data. Refer to the ROS documentation for details</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_get_vision_sensor_info" id="simros_strmcmd_get_vision_sensor_info"></a>streamCmd: simros_strmcmd_get_vision_sensor_info
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of camera information of a vision sensor. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. </td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the vision sensor handle. See also <a href="rosServices.htm#simRosGetObjectHandle">simRosGetObjectHandle</a>.</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>sensor_msgs::CameraInfo</strong>: the camera info</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_read_collision" id="simros_strmcmd_read_collision"></a>streamCmd: simros_strmcmd_read_collision
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of the collision state of a collision object. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosReadCollision">simRosReadCollision</a>)  for details. See also <a href="#simros_strmcmd_get_object_group_data">simros_strmcmd_get_object_group_data</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the handle of the collision object. See also <a href="rosServices.htm#simRosGetCollisionHandle">simRosGetCollisionHandle</a>.</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>std_msgs::Int32</strong>: the collision state</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_read_distance" id="simros_strmcmd_read_distance"></a>streamCmd: simros_strmcmd_read_distance
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of the distance a distance object measured. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosReadDistance">simRosReadDistance</a>)  for details. See also <a href="#simros_strmcmd_get_object_group_data">simros_strmcmd_get_object_group_data</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the handle of the distance object. See also <a href="rosServices.htm#simRosGetDistanceHandle">simRosGetDistanceHandle</a>.</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>std_msgs::Float32</strong>: the measured distance</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_read_force_sensor" id="simros_strmcmd_read_force_sensor"></a>streamCmd: simros_strmcmd_read_force_sensor
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of a force sensor's data (force and torque). See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosReadForceSensor">simRosReadForceSensor</a>)  for details. See also <a href="#simros_strmcmd_get_object_group_data">simros_strmcmd_get_object_group_data</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the force sensor handle. See also <a href="rosServices.htm#simRosGetObjectHandle">simRosGetObjectHandle</a>.</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>vrep_common::ForceSensorData::sensorState (Int32)</strong>: a bit-coded value:</div>
<div class=tab>bit 0 set: force and torque data is available, otherwise it is not (yet) available (e.g. when not enough values are present for the filter)</div>
<div class=tab>bit 1 set: force sensor is broken, otherwise it is still intact ('unbroken')</div>
<div><strong>vrep_common::ForceSensorData::force (geometry_msgs/Vector3)</strong>: the force</div>
<div><strong>vrep_common::ForceSensorData::torque (geometry_msgs/Vector3)</strong>: the torque</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_read_proximity_sensor" id="simros_strmcmd_read_proximity_sensor"></a>streamCmd: simros_strmcmd_read_proximity_sensor
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of a proximity sensor's data. Data is only streamed when the sensor detects something. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosReadProximitySensor">simRosReadProximitySensor</a>)  for details. See also <a href="#simros_strmcmd_get_object_group_data">simros_strmcmd_get_object_group_data</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the proximity sensor handle. See also <a href="rosServices.htm#simRosGetObjectHandle">simRosGetObjectHandle</a>.</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>vrep_common::ProximitySensorData::detectedPoint (geometry_msgs::Point32)</strong>: the detected point. Relative to the sensor reference frame.</div>
<div><strong>vrep_common::ProximitySensorData::detectedObject (Int32)</strong>: the handle of the detected object</div>
<div><strong>vrep_common::ProximitySensorData::normalVector (geometry_msgs::Point32)</strong>: the normal vector (normalized) of the detected surface. Relative to the sensor reference frame.</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simros_strmcmd_read_vision_sensor" id="simros_strmcmd_read_vision_sensor"></a>streamCmd: simros_strmcmd_read_vision_sensor
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of a vision sensor's state. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosReadVisionSensor">simRosReadVisionSensor</a>)  for details. See also <a href="#simros_strmcmd_get_vision_sensor_image">simros_strmcmd_get_vision_sensor_image</a> and <a href="#simros_strmcmd_get_object_group_data">simros_strmcmd_get_object_group_data</a>.</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the vision sensor handle. See also <a href="rosServices.htm#simRosGetObjectHandle">simRosGetObjectHandle</a>.</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: (not used, set to empty string)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data
</td> 
<td class=rosApiTableRightOut>
<div><strong>vrep_common::VisionSensorData::triggerState (Int32)</strong>: the detection or trigger state.</div>
<div><strong>vrep_common::VisionSensorData::packetData (Float32MultiArray)</strong>: auxiliary values returned from the <a href="visionSensorFilterComposition.htm">applied filters</a>. By default V-REP returns one packet of 15 auxiliary values:the minimum of {intensity, red, green, blue, depth value}, the maximum of {intensity, red, green, blue, depth value}, and the average of {intensity, red, green, blue, depth value}. If additional filter components return values, then they will be appended as packets to the first packet.</div>
<div><strong>vrep_common::VisionSensorData::packetSizes (Int32MultiArray)</strong>: contains information about the packet sizes. The first value is the size of packet 1, the second value the size of packet 2, etc.</div>
</td> 
</tr> 
</table> 
<br>












<h3 class=subsectionBar>
<a name="simros_strmcmd_receive_data_from_script_function" id="simros_strmcmd_receive_data_from_script_function"></a>streamCmd: simros_strmcmd_receive_data_from_script_function
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables streaming of generic data, that originates from a call to a script function triggered by the RosPlugin. See <a href="rosPublishers.htm#dataStreamingInfo">here</a> for information on how to enable data streaming. See also the service equivalent (<a href="rosServices.htm#simRosCallScriptFunction">simRosCallScriptFunction</a>)  for details. See also <a href="rosSubscriberTypes.htm#simros_strmcmd_send_data_to_script_function">simros_strmcmd_send_data_to_script_function</a>.<br>
<br>
Use this only for non-threaded scripts, and when calling <a href="simulationScripts.htm">simulation scripts</a>, then simulation must be running. The called script function should always have following input/output form:<br>
<br>
<pre class=lightRedBoxNoMarginAndSmall>
myFunctionName=function(inInts,inFloats,inStrings,inBuffer)
	-- inInts, inFloats and inStrings are empty tables, inBuffer is an empty string
    
    -- Perform any type of operation here.

	-- Always return tables or ints, floats and strings, and a string, e.g.:
	return {1,2,3},{42.59,21.0},{'Hello', 'world'},'012345'
end</pre>



</td>
</tr> 
<td class=rosApiTableLeftIn>Enabling parameters</td> 
<td class=rosApiTableRightIn>
<div><strong>auxInt1</strong>: the handle of the script, otherwise the type of the script:</div>
<div class=tab><em>sim_scripttype_mainscript</em> (0): the <a href="mainScript.htm">main script</a> will be called.</div>
<div class=tab><em>sim_scripttype_childscript</em> (1): a <a href="childScripts.htm">child script</a> will be called.</div>
<div class=tab><em>sim_scripttype_jointctrlcallback</em> (4): a <a href="jointCtrlCallbackScripts.htm">joint control callback script</a> will be called.</div>
<div class=tab><em>sim_scripttype_contactcallback</em> (5): the <a href="contactCallbackScript.htm">contact callback script</a> will be called.</div>
<div class=tab><em>sim_scripttype_customizationscript</em> (6): a <a href="customizationScripts.htm">customization script</a> will be called.</div>
<div class=tab><em>sim_scripttype_generalcallback</em> (7): the <a href="generalCallbackScript.htm">general callback script</a> will be called.</div>
<div><strong>auxInt2</strong>: (not used, set to -1)</div>
<div><strong>auxString</strong>: a string representing the function name and script name, e.g. <em>myFunctionName@theScriptName</em>. When the script is not associated with an object, then just specify the function name.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Streamed data</td> 
<td class=rosApiTableRightOut>
<div><strong>vrep_common::ScriptFunctionCallData</strong>: the generic data.</div>
</td> 
</tr> 
</table> 
<br>












































<br>
<br>
</td>
</tr>
</table> 
</div>  
  
  
</body>

</html>
