<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>RosPlugin services</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1><a href="rosInterfaceOverview.htm">RosPlugin</a> services</h1>

<h3 class=subsectionBar>
<a name="simRosAddStatusbarMessage" id="simRosAddStatusbarMessage"></a>simRosAddStatusbarMessage 
<div class=tab>regular API equivalent: <a href="regularApi/simAddStatusbarMessage.htm">simAddStatusbarMessage</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxAddStatusbarMessage">simxAddStatusbarMessage</a></div>
</h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Adds a message to the status bar.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_add_status_bar_message">simros_strmcmd_add_status_bar_message</a></div>
</td>
</tr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>message (string)</strong>: the message to display</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut> Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosAuxiliaryConsoleClose" id="simRosAuxiliaryConsoleClose"></a>simRosAuxiliaryConsoleClose 
<div class=tab>regular API equivalent: <a href="regularApi/simAuxiliaryConsoleClose.htm">simAuxiliaryConsoleClose</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxAuxiliaryConsoleClose">simxAuxiliaryConsoleClose</a></div>
</h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Closes an auxiliary console window. See also <a href="#simRosAuxiliaryConsoleOpen">simRosAuxiliaryConsoleOpen</a>.</td>
</tr> 

<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>consoleHandle (int32)</strong>: the handle of the console window, previously returned by the <a href="#simRosAuxiliaryConsoleOpen">simRosAuxiliaryConsoleOpen</a> command</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful. 0 if the console doesn't exist (anymore), in which case no error is generated. 1 if the console window was closed.</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosAuxiliaryConsoleOpen" id="simRosAuxiliaryConsoleOpen"></a>simRosAuxiliaryConsoleOpen 
<div class=tab>regular API equivalent: <a href="regularApi/simAuxiliaryConsoleOpen.htm">simAuxiliaryConsoleOpen</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxAuxiliaryConsoleOpen">simxAuxiliaryConsoleOpen</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Opens an auxiliary console window for text display. This console window is different from the application main console window. Console window handles are shared across all simulator scenes. See also <a href="#simRosAuxiliaryConsolePrint">simRosAuxiliaryConsolePrint</a>, <a href="#simRosAuxiliaryConsoleShow">simRosAuxiliaryConsoleShow</a> and <a href="#simRosAuxiliaryConsoleClose">simRosAuxiliaryConsoleClose</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>title (string)</strong>: the title of the console window</div>
<div><strong>maxLines (int32)</strong>: the number of text lines that can be displayed and buffered</div>
<div><strong>mode (int32)</strong>: bit-coded value. Bit0 set indicates that the console window will   automatically close at simulation end, bit1 set   indicates that lines will be wrapped, bit2 set indicates that the user   can close the console window, bit3 set indicates that the console will   automatically be hidden during simulation pause, bit4 set indicates that   the console will not automatically hide when the user switches to   another scene.</div>
<div><strong>position (int32[])</strong>: the initial position of the console window (x and y value). Can be empty for default values</div>
<div><strong>size (int32[])</strong>: the initial size of the console window (x and y value). Can be empty for default values</div>
<div><strong>textColor (float32[])</strong>: the color of the text (rgb values, 0-1). Can be empty for default values</div>
<div><strong>backgroundColor (float32[])</strong>: the background color of the console window (rgb values, 0-1). Can be empty for default values</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>consoleHandle (int32)</strong>: the handle of the created console</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosAuxiliaryConsolePrint" id="simRosAuxiliaryConsolePrint"></a>simRosAuxiliaryConsolePrint 
<div class=tab>regular API equivalent: <a href="regularApi/simAuxiliaryConsolePrint.htm">simAuxiliaryConsolePrint</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxAuxiliaryConsolePrint">simxAuxiliaryConsolePrint</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Prints to an auxiliary console window. See also <a href="#simRosAuxiliaryConsoleOpen">simRosAuxiliaryConsoleOpen</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_auxiliary_console_print">simros_strmcmd_auxiliary_console_print</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>consoleHandle (int32)</strong>: the handle of the console window, previously returned by the <a href="#simRosAuxiliaryConsoleOpen">simRosAuxiliaryConsoleOpen</a> command</div>
<div><strong>text (string)</strong>: the text to append, or an empty string to clear the console window</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful. 0 if the console doesn't exist   (anymore), in which case no error is generated. 1 if the operation was   successful.</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosAuxiliaryConsoleShow" id="simRosAuxiliaryConsoleShow"></a>simRosAuxiliaryConsoleShow 
<div class=tab>regular API equivalent: <a href="regularApi/simAuxiliaryConsoleShow.htm">simAuxiliaryConsoleShow</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxAuxiliaryConsoleShow">simxAuxiliaryConsoleShow</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Shows or hides an auxiliary console window. See also <a href="#simRosAuxiliaryConsoleOpen">simRosAuxiliaryConsoleOpen</a> and <a href="#simRosAuxiliaryConsoleClose">simRosAuxiliaryConsoleClose</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>consoleHandle (int32)</strong>: the handle of the console window, previously returned by the <a href="#simRosAuxiliaryConsoleOpen">simRosAuxiliaryConsoleOpen</a> command</div>
<div><strong>showState (uint8)</strong>: indicates whether the console should be hidden (0) or shown (!=0)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful. 0 if the console doesn't exist   (anymore), in which case no error is generated. 1 if the console   window's show state was changed.</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosBreakForceSensor" id="simRosBreakForceSensor"></a>simRosBreakForceSensor 
<div class=tab>regular API equivalent: <a href="regularApi/simBreakForceSensor.htm">simBreakForceSensor</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxBreakForceSensor">simxBreakForceSensor</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Allows breaking a force sensor during simulation. A broken force sensor will lose its positional and orientational constraints. See also <a href="#simRosReadForceSensor">simRosReadForceSensor</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>objectHandle (int32)</strong>: handle of the force sensor</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosCallScriptFunction" id="simRosCallScriptFunction"></a>simRosCallScriptFunction 
<div class=tab>regular API equivalent: <a href="regularApi/simCallScriptFunctionEx.htm">simCallScriptFunctionEx</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxCallScriptFunction">simxCallScriptFunction</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Remotely calls a V-REP script function. Call this only for non-threaded scripts, and when calling <a href="simulationScripts.htm">simulation scripts</a>, then simulation must be running. The called script function should always have following input/output form:

<pre class=lightRedBoxNoMarginAndSmall>
myFunctionName=function(inInts,inFloats,inStrings,inBuffer)
	-- inInts, inFloats and inStrings are tables
	-- inBuffer is a string
    
    -- Perform any type of operation here.

	-- Always return 3 tables and a string, e.g.:
	return {},{},{},''
end</pre>

<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_send_data_to_script_function">simros_strmcmd_send_data_to_script_function</a></div>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_receive_data_from_script_function">simros_strmcmd_receive_data_from_script_function</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>functionNameAtObjectName (string)</strong>: a string representing the function name and script name, e.g. <em>myFunctionName@theScriptName</em>. When the script is not associated with an object, then just specify the function name.</div>
<div><strong>scriptHandleOrType (int32)</strong>: the handle of the script, otherwise the type of the script:</div>
<div class=tab><em>sim_scripttype_mainscript</em> (0): the <a href="mainScript.htm">main script</a> will be called.</div>
<div class=tab><em>sim_scripttype_childscript</em> (1): a <a href="childScripts.htm">child script</a> will be called.</div>
<div class=tab><em>sim_scripttype_jointctrlcallback</em> (4): a <a href="jointCtrlCallbackScripts.htm">joint control callback script</a> will be called.</div>
<div class=tab><em>sim_scripttype_contactcallback</em> (5): the <a href="contactCallbackScript.htm">contact callback script</a> will be called.</div>
<div class=tab><em>sim_scripttype_customizationscript</em> (6): a <a href="customizationScripts.htm">customization script</a> will be called.</div>
<div class=tab><em>sim_scripttype_generalcallback</em> (7): the <a href="generalCallbackScript.htm">general callback script</a> will be called.</div>
<div><strong>inputInts (int32[])</strong>: the input integer values that are handed over to the script function.</div>
<div><strong>inputFloats (float32[])</strong>: the input floating-point values that are handed over to the script function.</div>
<div><strong>inputStrings (string[])</strong>: the input strings values that are handed over to the script function.</div>
<div><strong>inputBuffer (string)</strong>: the input buffer (bytes) that is handed over to the script function.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful.</div>
<div><strong>outputInts (int32[])</strong>: the returned integer values.</div>
<div><strong>outputFloats (float32[])</strong>: the returned floating-point values.</div>
<div><strong>outputStrings (string[])</strong>: the returned strings.</div>
<div><strong>outputBuffer (string)</strong>: the returned buffer (bytes).</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosClearFloatSignal" id="simRosClearFloatSignal"></a>simRosClearFloatSignal 
<div class=tab>regular API equivalent: <a href="regularApi/simClearFloatSignal.htm">simClearFloatSignal</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxClearFloatSignal">simxClearFloatSignal</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Clears a float signal (removes it). See also <a href="#simRosSetFloatSignal">simRosSetFloatSignal</a>, <a href="#simRosClearIntegerSignal">simRosClearIntegerSignal</a> and <a href="#simRosClearStringSignal">simRosClearStringSignal</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_clear_float_signal">simros_strmcmd_clear_float_signal</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>signalName (string)</strong>: name of the signal or an empty string to clear all float signals</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful, otherwise the number of signals cleared</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosClearIntegerSignal" id="simRosClearIntegerSignal"></a>simRosClearIntegerSignal 
<div class=tab>regular API equivalent: <a href="regularApi/simClearIntegerSignal.htm">simClearIntegerSignal</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxClearIntegerSignal">simxClearIntegerSignal</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Clears an integer signal (removes it). See also <a href="#simRosSetIntegerSignal">simRosSetIntegerSignal</a>, <a href="#simRosClearFloatSignal">simRosClearFloatSignal</a> and <a href="#simRosClearStringSignal">simRosClearStringSignal</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_clear_integer_signal">simros_strmcmd_clear_integer_signal</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>signalName (string)</strong>: name of the signal or an empty string to clear all integer signals</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful, otherwise the number of signals cleared</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosClearStringSignal" id="simRosClearStringSignal"></a>simRosClearStringSignal 
<div class=tab>regular API equivalent: <a href="regularApi/simClearStringSignal.htm">simClearStringSignal</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxClearStringSignal">simxClearStringSignal</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Clears a string signal (removes it). See also <a href="#simRosSetStringSignal">simRosSetStringSignal</a>, <a href="#simRosClearIntegerSignal">simRosClearIntegerSignal</a> and <a href="#simRosClearFloatSignal">simRosClearFloatSignal</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_clear_string_signal">simros_strmcmd_clear_string_signal</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>signalName</strong>: name of the signal or an empty string to clear all string signals</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosCloseScene" id="simRosCloseScene"></a>simRosCloseScene 
<div class=tab>regular API equivalent: <a href="regularApi/simCloseScene.htm">simCloseScene</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxCloseScene">simxCloseScene</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Closes current scene, and switches to another open scene. If there is no other open scene, a new scene is then created. Should only be called when simulation is not running. See also <a href="#simRosLoadScene">simRosLoadScene</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div>-</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosCopyPasteObjects" id="simRosCopyPasteObjects"></a>simRosCopyPasteObjects 
<div class=tab>regular API equivalent: <a href="regularApi/simCopyPasteObjects.htm">simCopyPasteObjects</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxCopyPasteObjects">simxCopyPasteObjects</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Copies and pastes objects, together with all their associated calculation objects and child scripts. To copy and paste whole models, you can simply copy and paste the model base object.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>objectHandles (int32[])</strong>: the handles of the objects to copy</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: the number of copied objects (not necessarily the number of returned object handles!)</div>
<div><strong>newObjectHandles (int32)</strong>: the handles of newly created objects. Individual objects of a new model are not returned, but only the model base.</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosCreateDummy" id="simRosCreateDummy"></a>simRosCreateDummy 
<div class=tab>regular API equivalent: <a href="regularApi/simCreateDummy.htm">simCreateDummy</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxCreateDummy">simxCreateDummy</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Creates a <a href="dummies.htm">dummy</a> in the scene.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>size (float32)</strong>: the size of the dummy</div>
<div><strong>colors (int8[])</strong>: 4*3 bytes (0-255) for ambient_diffuse RGB, 3 reserved values (set to zero), specular RGB and emissive RGB. Can be empty for default colors.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>dummyHandle (int32)</strong>: the handle of the created dummy, or -1 in case of an error</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosDisablePublisher" id="simRosDisablePublisher"></a>simRosDisablePublisher</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Disables a publisher (i.e. V-REP will stop streaming data on a specific topic) previously enabled with <a href="#simRosEnablePublisher">simRosEnablePublisher</a>. If a same publisher was enabled several times (e.g. from different nodes), then this command will only decrement a reference counter (a publisher is effectively disabled when its reference counter reaches zero). At simulation end, all publishers are automatically disabled. A publisher can also be disabled using the RosPlugin's exported Lua function: <a href="rosPublishers.htm#simExtROS_disablePublisher">simExtROS_disablePublisher</a>. See also <a href="#simRosDisableSubscriber">simRosDisableSubscriber</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>topicName (string)</strong>: the topic name previously returned by <a href="#simRosEnablePublisher">simRosEnablePublisher</a>.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>referenceCounter (int32)</strong>: the value of the reference counter. If the counter is &gt;0, then the publisher is still enabled. If the counter is 0, then the publisher was just disabled. If referenceCounter is -1, there was an error.</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosDisableSubscriber" id="simRosDisableSubscriber"></a>simRosDisableSubscriber</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Disables a subscriber (i.e. data streaming for a specific topic will not be read anymore by V-REP) previously enabled with <a href="#simRosEnableSubscriber">simRosEnableSubscriber</a>. At simulation end, all subscribers are automatically disabled. A subscriber can also be disabled using the RosPlugin's exported Lua function: <a href="rosSubscribers.htm#simExtROS_disableSubscriber">simExtROS_disableSubscriber</a>. See also <a href="#simRosDisablePublisher">simRosDisablePublisher</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>subscriberID (int32)</strong>: a subscriber ID previously returned by <a href="#simRosEnableSubscriber">simRosEnableSubscriber</a>.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (uint8)</strong>: 0 if the operation was not successful.</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosDisplayDialog" id="simRosDisplayDialog"></a>simRosDisplayDialog 
<div class=tab>regular API equivalent: <a href="regularApi/simDisplayDialog.htm">simDisplayDialog</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxDisplayDialog">simxDisplayDialog</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Displays a generic dialog box during simulation (and only during simulation!). Use in conjunction with <a href="#simRosGetDialogResult">simRosGetDialogResult</a>, <a href="#simRosGetDialogInput">simRosGetDialogInput</a> and <a href="#simRosEndDialog">simRosEndDialog</a>. Use <a href="customUserInterfaces.htm">custom user interfaces</a> instead if a higher customization level is required.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>titleText (string)</strong>: Title bar text</div>
<div><strong>mainText (string)</strong>: Information text</div>
<div><strong>dialogType (int32)</strong>: a <a href="apiConstants.htm#genericDialogStyles">generic dialog style</a></div>
<div><strong>initialText (string)</strong>: Initial text in the edit box if the dialog is of type sim_dlgstyle_input. Cannot be NULL!</div>
<div><strong>titleColors (float32[])</strong>: Title bar color (6 values for RGB for background and foreground), can be empty for default colors</div>
<div><strong>dialogColors (float32[])</strong>: Dialog color (6 values for RGB for background and foreground), can be empty for default colors</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>dialogHandle (int32)</strong>: handle of the generic dialog (different from OpenGl-based custom UI handle!! (see hereafter)). This handle should be used with the following functions: <a href="#simRosGetDialogResult">simRosGetDialogResult</a>, <a href="#simRosGetDialogInput">simRosGetDialogInput</a> and <a href="#simRosEndDialog">simRosEndDialog</a>.</div>
<div><strong>uiHandle (int32)</strong>: handle of the corresponding OpenGl-based custom UI.</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosEnablePublisher" id="simRosEnablePublisher"></a>simRosEnablePublisher</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables a publisher (i.e. V-REP will be streaming data on  a specific topic). Publishers can only be enabled while simulation is running.  If a same publisher (i.e. of the same type and applied to the same item) was already enabled previously, then a reference counter will be incremented and the topic name of that publisher is returned. Publishers can be disabled with <a href="#simRosDisablePublisher">simRosDisablePublisher</a>. At simulation end, all publishers are automatically disabled. A publisher can also be enabled using the RosPlugin's exported Lua function: <a href="rosPublishers.htm#simExtROS_enablePublisher">simExtROS_enablePublisher</a>. See also <a href="#simRosEnableSubscriber">simRosEnableSubscriber</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>topicName (string)</strong>: the desired topic name.</div>
<div><strong>queueSize (int32)</strong>: the desired queue size.</div>
<div><strong>streamCmd (int32)</strong>: the desired <a href="rosPublisherTypes.htm">type of data to stream</a>.</div>
<div><strong>auxInt1 (int32)</strong>: an auxiliary integer value (first) that might be needed to fully specify the desired data to stream</div>
<div><strong>auxInt2 (int32)</strong>: an auxiliary integer value (second) that might be needed to fully specify the desired data to stream</div>
<div><strong>auxString (string)</strong>: an auxiliary string value that might be needed to fully specify the desired data to stream</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>effectiveTopicName (string)</strong>: the effective topic name that will be used to stream the desired data, or an empty string if there was an error. If the desired topic name is already in use for another type of publisher, then a new topic name is generated (i.e. &quot;_2&quot; appended). If the desired publisher is already enabled, then the topic name of that existing publisher is returned.</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosEnableSubscriber" id="simRosEnableSubscriber"></a>simRosEnableSubscriber</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables a subscriber (i.e. V-REP will be listening to data streaming on a specific topic). Subscribers can only be enabled while simulation is running.  Subscribers can be disabled with <a href="#simRosDisableSubscriber">simRosDisableSubscriber</a>. At simulation end, all subscribers are automatically disabled. A subscriber can also be enabled using the RosPlugin's exported Lua function: <a href="rosSubscribers.htm#simExtROS_enableSubscriber">simExtROS_enableSubscriber</a>. See also <a href="#simRosEnablePublisher">simRosEnablePublisher</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>topicName (string)</strong>: the desired topic name.</div>
<div><strong>queueSize (int32)</strong>: the desired queue size.</div>
<div><strong>streamCmd (int32)</strong>: the desired <a href="rosSubscriberTypes.htm">type of data to stream</a>.</div>
<div><strong>auxInt1 (int32)</strong>: an auxiliary integer value (first) that might be needed to fully specify the desired data to stream</div>
<div><strong>auxInt2 (int32)</strong>: an auxiliary integer value (second) that might be needed to fully specify the desired data to stream</div>
<div><strong>auxString (string)</strong>: an auxiliary string value that might be needed to fully specify the desired data to stream</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>subscriberID (int32)</strong>: a subscriber ID, or -1 in case of an error. The subscriber ID is needed to disable that subscriber with <a href="#simRosDisableSubscriber">simRosDisableSubscriber</a>.</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosEndDialog" id="simRosEndDialog"></a>simRosEndDialog 
<div class=tab>regular API equivalent: <a href="regularApi/simEndDialog.htm">simEndDialog</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxEndDialog">simxEndDialog</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Closes and releases resources from a previous call to <a href="#simRosDisplayDialog">simRosDisplayDialog</a>. Even if the dialog is not visible anymore, you should release resources by using this function (however, at the end of a simulation, all dialog resources are automatically released).</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>dialogHandle (int32)</strong>: handle of generic dialog (return value of <a href="#simRosDisplayDialog">simRosDisplayDialog</a>)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosEraseFile" id="simRosEraseFile"></a>simRosEraseFile (remote API equivalent: <a href="remoteApiFunctions.htm#simxEraseFile">simxEraseFile</a>)
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Erases a file on the server side.  See also <a href="#simRosTransferFile">simRosTransferFile</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>fileName (string)</strong>: the file to erase on the server side. For now, do not specify a path (the file will be erased in the V-REP installation directory)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>










<h3 class=subsectionBar>
<a name="simRosGetAndClearStringSignal" id="simRosGetAndClearStringSignal"></a>simRosGetAndClearStringSignal (remote API equivalent: <a href="remoteApiFunctions.htm#simxGetStringSignal">simxGetStringSignal</a>)
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Gets the value of a string signal, then clears it.  Useful to retrieve continuous data from the server. See also <a href="#simRosGetStringSignal">simRosGetStringSignal</a>.
<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_and_clear_string_signal">simros_strmcmd_get_and_clear_string_signal</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>signalName (string)</strong>: name of the signal</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful, 0 if the signal does not exist. 1 otherwise.</div>
<div><strong>signalValue (string)</strong>: the value of the signal, which may contain any data (also embedded zeros).</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetArrayParameter" id="simRosGetArrayParameter"></a>simRosGetArrayParameter 
<div class=tab>regular API equivalent: <a href="regularApi/simGetArrayParameter.htm">simGetArrayParameter</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetArrayParameter">simxGetArrayParameter</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves 3 values from an array. See the <a href="apiConstants.htm#arrayParameters">array parameter identifiers</a>. See also <a href="#simRosSetArrayParameter">simRosSetArrayParameter</a>, <a href="#simRosGetBooleanParameter">simRosGetBooleanParameter</a>, <a href="#simRosGetIntegerParameter">simRosGetIntegerParameter</a>, <a href="#simRosGetFloatingParameter">simRosGetFloatingParameter</a> and <a href="#simRosGetStringParameter">simRosGetStringParameter</a>.
<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_array_parameter">simros_strmcmd_get_array_parameter</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>parameter (int32)</strong>: an <a href="apiConstants.htm#arrayParameters">array parameter identifier</a></div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
<div><strong>parameterValues (float32[])</strong>: the 3 parameter values</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetBooleanParameter" id="simRosGetBooleanParameter"></a>simRosGetBooleanParameter 
<div class=tab>regular API equivalent: <a href="regularApi/simGetBoolParameter.htm">simGetBoolParameter</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetBooleanParameter">simxGetBooleanParameter</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves a boolean value. See the <a href="apiConstants.htm#booleanParameters">Boolean parameter identifiers</a>. See also <a href="#simRosSetBooleanParameter">simRosSetBooleanParameter</a>, <a href="#simRosGetIntegerParameter">simRosGetIntegerParameter</a>, <a href="#simRosGetFloatingParameter">simRosGetFloatingParameter</a>, <a href="#simRosGetArrayParameter">simRosGetArrayParameter</a> and <a href="#simRosGetStringParameter">simRosGetStringParameter</a>.
<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_boolean_parameter">simros_strmcmd_get_boolean_parameter</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>parameter (int32)</strong>: a <a href="apiConstants.htm#booleanParameters">Boolean parameter identifier</a></div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>parameterValue (int32)</strong>: -1 if operation was not successful, otherwise the parameter value</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetCollectionHandle" id="simRosGetCollectionHandle"></a>simRosGetCollectionHandle 
<div class=tab>regular API equivalent: <a href="regularApi/simGetCollectionHandle.htm">simGetCollectionHandle</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetCollectionHandle">simxGetCollectionHandle</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves a collection handle based on its name. See also <a href="#simRosGetObjectGroupData">simRosGetObjectGroupData</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>collectionName (string)</strong>: name of the collection. If possibe, don't rely on the <a href="accessingGeneralObjects.htm">automatic name adjustment mechanism</a>, and always specify the full collection name, including the #: if the collection is &quot;myCollection&quot;, specify &quot;myCollection#&quot;, if the collection is &quot;myCollection#0&quot;, specify &quot;myCollection#0&quot;, etc.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>handle (int32)</strong>: -1 if operation was not successful, otherwise the handle of the collection</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simRosGetCollisionHandle" id="simRosGetCollisionHandle"></a>simRosGetCollisionHandle 
<div class=tab>regular API equivalent: <a href="regularApi/simGetCollisionHandle.htm">simGetCollisionHandle</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetCollisionHandle">simxGetCollisionHandle</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves a collision  object handle based on its name. See also <a href="#simRosGetObjectGroupData">simRosGetObjectGroupData</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>collisionName (string)</strong>: name of the collision object. If possibe, don't rely on the <a href="accessingGeneralObjects.htm">automatic name adjustment mechanism</a>, and always specify the full collision object name, including the #: if the collision object is &quot;myCollision&quot;, specify &quot;myCollision#&quot;, if the collision object is &quot;myCollision#0&quot;, specify &quot;myCollision#0&quot;, etc.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>handle (int32)</strong>: -1 if operation was not successful, otherwise the handle of the collision object</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simRosGetDialogInput" id="simRosGetDialogInput"></a>simRosGetDialogInput 
<div class=tab>regular API equivalent: <a href="regularApi/simGetDialogInput.htm">simGetDialogInput</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetDialogInput">simxGetDialogInput</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Queries the text the user entered into a  generic dialog box of style sim_dlgstyle_input. To be used after <a href="#simRosDisplayDialog">simRosDisplayDialog</a> was called and after <a href="#simRosGetDialogResult">simRosGetDialogResult</a> returned sim_dlgret_ok.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>dialogHandle (int32)</strong>: handle of generic dialog (return value of <a href="#simRosDisplayDialog">simRosDisplayDialog</a>)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
<div><strong>input (string)</strong>: the string the user entered.</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetDialogResult" id="simRosGetDialogResult"></a>simRosGetDialogResult 
<div class=tab>regular API equivalent: <a href="regularApi/simGetDialogResult.htm">simGetDialogResult</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetDialogResult">simxGetDialogResult</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Queries the result of a dialog box. To be used after <a href="#simRosDisplayDialog">simRosDisplayDialog</a> was called.
<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_dialog_result">simros_strmcmd_get_dialog_result</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>dialogHandle (int32)</strong>: handle of a generic dialog (return value of <a href="#simRosDisplayDialog">simRosDisplayDialog</a>)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful, otherwise a <a href="apiConstants.htm#genericDialogReturnValues">dialog result value</a>.</div>
<br>
<div>Note. If the result value is sim_dlgret_still_open, the dialog was not closed and no button was pressed. Otherwise, you should free resources with <a href="#simRosEndDialog">simRosEndDialog</a> (the dialog might not be visible anymore, but is still present)</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetDistanceHandle" id="simRosGetDistanceHandle"></a>simRosGetDistanceHandle 
<div class=tab>regular API equivalent: <a href="regularApi/simGetDistanceHandle.htm">simGetDistanceHandle</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetDistanceHandle">simxGetDistanceHandle</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves a distance  object handle based on its name. See also <a href="#simRosGetObjectGroupData">simRosGetObjectGroupData</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>distanceName (string)</strong>: name of the distance object. If possibe, don't rely on the <a href="accessingGeneralObjects.htm">automatic name adjustment mechanism</a>, and always specify the full distance object name, including the #: if the distance object is &quot;myDistance&quot;, specify &quot;myDistance#&quot;, if the distance object is &quot;myDistance#0&quot;, specify &quot;myDistance#0&quot;, etc.</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>handle (int32)</strong>: -1 if operation was not successful, otherwise the handle of the distance object</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetFloatingParameter" id="simRosGetFloatingParameter"></a>simRosGetFloatingParameter 
<div class=tab>regular API equivalent: <a href="regularApi/simGetFloatParameter.htm">simGetFloatParameter</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetFloatingParameter">simxGetFloatingParameter</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves a floating point value. See the <a href="apiConstants.htm#floatingParameters">floating-point parameter identifiers</a>. See also <a href="#simRosSetFloatingParameter">simRosSetFloatingParameter</a>, <a href="#simRosGetBooleanParameter">simRosGetBooleanParameter</a>, <a href="#simRosGetIntegerParameter">simRosGetIntegerParameter</a>, <a href="#simRosGetArrayParameter">simRosGetArrayParameter</a> and <a href="#simRosGetStringParameter">simRosGetStringParameter</a>.
<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_floating_parameter">simros_strmcmd_get_floating_parameter</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>parameter (int32)</strong>: a <a href="apiConstants.htm#floatingParameters">floating parameter identifier</a></div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
<div><strong>parameterValue (float32)</strong>: the parameter value</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetFloatSignal" id="simRosGetFloatSignal"></a>simRosGetFloatSignal 
<div class=tab>regular API equivalent: <a href="regularApi/simGetFloatSignal.htm">simGetFloatSignal</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetFloatSignal">simxGetFloatSignal</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Gets the value of a float signal. Signals are cleared at simulation start. See also <a href="#simRosSetFloatSignal">simRosSetFloatSignal</a>, <a href="#simRosClearFloatSignal">simRosClearFloatSignal</a>, <a href="#simRosGetIntegerSignal">simRosGetIntegerSignal</a> and <a href="#simRosGetStringSignal">simRosGetStringSignal</a>.
<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_float_signal">simros_strmcmd_get_float_signal</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>signalName (string)</strong>: name of the signal</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful, 0 if signal does not exist. 1 otherwise.</div>
<div><strong>signalValue (float32)</strong>: the value of the signal</div>
</td> 
</tr> 
</table> 
<br>















<h3 class=subsectionBar>
<a name="simRosGetInfo" id="simRosGetInfo"></a>simRosGetInfo (remote API equivalent: <a href="remoteApiFunctions.htm#simxGetInMessageInfo">simxGetInMessageInfo</a>)
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves basic information from the server (V-REP)
<br>
<br>
<div>Equivalent streaming  topic name: <a href="rosPublisherTypes.htm#simros_strmcmd_get_info">info</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div>-</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>headerInfo (Header)</strong>: header information</div>
<div><strong>simulatorState (int32)</strong>: the simulator state, bit-coded:</div>
<div class=tab>bit0 set: simulation not stopped</div>
<div class=tab>bit1 set: simulation paused</div>
<div class=tab>bit2 set: real-time switch on</div>
<div class=tab>bit3-bit5: the edit mode type (0=no edit mode, 1=triangle, 2=vertex, 3=edge, 4=path, 5=UI)</div>
<div><strong>simulationTime (float32)</strong>: the simulation time</div>
<div><strong>timeStep (float32)</strong>: the simulation time step</div>
</td> 
</tr> 
</table> 
<br>


















<h3 class=subsectionBar>
<a name="simRosGetIntegerParameter" id="simRosGetIntegerParameter"></a>simRosGetIntegerParameter 
<div class=tab>regular API equivalent: <a href="regularApi/simGetInt32Parameter.htm">simGetInt32Parameter</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetIntegerParameter">simxGetIntegerParameter</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves an integer value. See the <a href="apiConstants.htm#integerParameters">integer parameter identifiers</a>. See also <a href="#simRosSetIntegerParameter">simRosSetIntegerParameter</a>, <a href="#simRosGetBooleanParameter">simRosGetBooleanParameter</a>, <a href="#simRosGetFloatingParameter">simRosGetFloatingParameter</a>, <a href="#simRosGetArrayParameter">simRosGetArrayParameter</a> and <a href="#simRosGetStringParameter">simRosGetStringParameter</a>.
<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_integer_parameter">simros_strmcmd_get_integer_parameter</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>parameter (int32)</strong>: an <a href="apiConstants.htm#integerParameters">integer parameter identifier</a></div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
<div><strong>parameterValue (int32)</strong>: the parameter value</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetIntegerSignal" id="simRosGetIntegerSignal"></a>simRosGetIntegerSignal 
<div class=tab>regular API equivalent: <a href="regularApi/simGetIntegerSignal.htm">simGetIntegerSignal</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetIntegerSignal">simxGetIntegerSignal</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Gets the value of an integer signal. Signals are cleared at simulation start. See also <a href="#simRosSetIntegerSignal">simRosSetIntegerSignal</a>, <a href="#simRosClearIntegerSignal">simRosClearIntegerSignal</a>, <a href="#simRosGetFloatSignal">simRosGetFloatSignal</a> and <a href="#simRosGetStringSignal">simRosGetStringSignal</a>.
<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_integer_signal">simros_strmcmd_get_integer_signal</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>signalName (string)</strong>: name of the signal</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful, 0 if signal does not exist. 1 otherwise.</div>
<div><strong>signalValue (int32)</strong>: the value of the signal</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetJointMatrix" id="simRosGetJointMatrix"></a>simRosGetJointMatrix 
<div class=tab>regular API equivalent: <a href="regularApi/simGetJointMatrix.htm">simGetJointMatrix</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetJointMatrix">simxGetJointMatrix</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves the intrinsic transform of a joint (the transformation caused by the joint movement). See also <a href="#simRosSetSphericalJointMatrix">simRosSetSphericalJointMatrix</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the joint</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
<div><strong>transform (geometry_msgs/TransformationStamped)</strong>: a transform. Refer to the ROS documentation</div>
</td> 
</tr> 
</table> 
<br>










<h3 class=subsectionBar>
<a name="simRosGetJointState" id="simRosGetJointState"></a>simRosGetJointState 
<div class=tab>regular API equivalent: <a href="regularApi/simGetJointPosition.htm">simGetJointPosition</a>/<a href="regularApi/simGetJointForce.htm">simGetJointForce</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetJointPosition">simxGetJointPosition</a>/<a href="remoteApiFunctions.htm#simxGetJointForce">simxGetJointForce</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves information about a joint's position, velocity and force (with the <a href="dynamicsModule.htm#bullet">Bullet</a> engine, the returned force or torque is the force or torque applied to the joint motor  torques from joint limits are not taken into account). With the <a href="dynamicsModule.htm#ode">ODE</a> or <a href="dynamicsModule.htm#vortex">Vortex</a> engine, the total force or torque applied to a joint  along/about its z-axis is returned). This function cannot be used with spherical joints (use <a href="#simRosGetJointMatrix">simRosGetJointMatrix</a> instead). See also <a href="#simRosSetJointState">simRosSetJointState</a>, <a href="#simRosSetJointPosition">simRosSetJointPosition</a>, <a href="#simRosSetJointTargetPosition">simRosSetJointTargetPosition</a>, <a href="#simRosSetJointTargetVelocity">simRosSetJointTargetVelocity,</a> <a href="#simRosSetJointForce">simRosSetJointForce</a>and <a href="#simRosGetObjectGroupData">simRosGetObjectGroupData</a>.<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_joint_state">simros_strmcmd_get_joint_state</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the joint, or sim_handle_all to retrieve information of all joints in a scene</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
<div><strong>JointState (sensor_msgs/JointState)</strong>: the joint state (position, velocity and force/torque). Refer to the ROS documentation.
</div>
</td> 
</tr> 
</table> 
<br>












<h3 class=subsectionBar>
<a name="simRosGetLastErrors" id="simRosGetLastErrors"></a>simRosGetLastErrors 
<div class=tab>regular API equivalent: <a href="regularApi/simGetLastError.htm">simGetLastError</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetLastErrors">simxGetLastErrors</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves the last 50 errors that occured on the server side, and clears the error buffer there. Only errors that occured because of ROS services will be reported.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div>-</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>errorCnt (int32)</strong>: -1 if operation was not successful, otherwise the number of error strings returned</div>
<div><strong>errorStrings (string)</strong>: the error strings (individual strings are separated by a zero character). </div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetModelProperty" id="simRosGetModelProperty"></a>simRosGetModelProperty 
<div class=tab>regular API equivalent: <a href="regularApi/simGetModelProperty.htm">simGetModelProperty</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetModelProperty">simxGetModelProperty</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves the properties of a model. See also <a href="#simRosSetModelProperty">simRosSetModelProperty</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the object</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>propertyValue (int32)</strong>: -1 if operation was not successful, otherwise the <a href="apiConstants.htm#modelProperties">model property value</a></div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetObjectChild" id="simRosGetObjectChild"></a>simRosGetObjectChild 
<div class=tab>regular API equivalent: <a href="regularApi/simGetObjectChild.htm">simGetObjectChild</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetObjectChild">simxGetObjectChild</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves the handle of an object's child object. See also <a href="#simRosGetObjectParent">simRosGetObjectParent</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the object</div>
<div><strong>index (int32)</strong>: zero-based index of the child's position. To retrieve all children of an object, call the function by increasing the index until the child handle is  -1</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>childHandle (int32)</strong>: -1 if operation was not successful or there is no child at the given index, otherwise the handle of the child object.</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetObjectFloatParameter" id="simRosGetObjectFloatParameter"></a>simRosGetObjectFloatParameter 
<div class=tab>regular API equivalent: <a href="regularApi/simGetObjectFloatParameter.htm">simGetObjectFloatParameter</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetObjectFloatParameter">simxGetObjectFloatParameter</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves a floating-point parameter of a object. See also <a href="#simRosSetObjectFloatParameter">simRosSetObjectFloatParameter</a> and <a href="#simRosGetObjectIntParameter">simRosGetObjectIntParameter</a>.
<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_object_float_parameter">simros_strmcmd_get_object_float_parameter</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the object</div>
<div><strong>parameterID (int32)</strong>: identifier of the parameter to retrieve. See the <a href="objectParameterIDs.htm">list of all possible object parameter identifiers</a></div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
<div><strong>parameterValue (float32)</strong>: pthe value of the parameter</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetObjectGroupData" id="simRosGetObjectGroupData"></a>simRosGetObjectGroupData (remote API equivalent: <a href="remoteApiFunctions.htm#simxGetObjectGroupData">simxGetObjectGroupData</a>)
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Simultaneously retrieves data of various objects in a V-REP scene.
<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_object_group_data">simros_strmcmd_get_object_group_data</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>objectType (int32)</strong>: a <a href="apiConstants.htm#sceneObjectTypes">scene object type</a>, sim_appobj_object_type for all <a href="objects.htm">scene objects</a>, or a <a href="#simRosGetCollectionHandle">collection</a> handle.</div>
<div><strong>dataType (int32)</strong>: the type of data that is desired: </div>
<div class=tab>0: retrieves the object names (in strings.)</div>
<div class=tab>1: retrieves the <a href="apiConstants.htm#sceneObjectTypes">object types</a> (in intData)</div>
<div class=tab>2: retrieves the parent object handles (in intData)</div>
<div class=tab>3: retrieves the absolute object positions (in floatData. There are 3 values for each object (x,y,z))</div>
<div class=tab>4: retrieves the local object positions (in floatData. There are 3 values for each object (x,y,z))</div>
<div class=tab>5: retrieves the absolute object orientations as <a href="eulerAngles.htm">Euler angles</a> (in floatData. There are 3 values for each object (alpha,beta,gamma))</div>
<div class=tab>6: retrieves the local object orientations as <a href="eulerAngles.htm">Euler angles</a> (in floatData. There are 3 values for each object (alpha,beta,gamma))</div>
<div class=tab>7: retrieves the absolute object orientations as quaternions (in floatData. There are 4 values for each object (qx,qy,qz,qw))</div>
<div class=tab>8: retrieves the local object orientations as quaternions (in floatData. There are 4 values for each object (qx,qy,qz,qw))</div>
<div class=tab>9: retrieves the absolute object positions and orientations (as <a href="eulerAngles.htm">Euler angles</a>) (in floatData. There are 6 values for each object (x,y,z,alpha,beta,gamma))</div>
<div class=tab>10: retrieves the local object positions and orientations (as <a href="eulerAngles.htm">Euler angles</a>) (in floatData. There are 6 values for each object (x,y,z,alpha,beta,gamma))</div>
<div class=tab>11: retrieves the absolute object positions and orientations (as quaternions) (in floatData. There are 7 values for each object (x,y,z,qx,qy,qz,qw))</div>
<div class=tab>12: retrieves the local object positions and orientations (as quaternions) (in floatData. There are 7 values for each object (x,y,z,qx,qy,qz,qw))</div>
<div class=tab>13: retrieves proximity sensor data (in intData (2 values): detection state, detected object handle. In floatData (6 values): detected point (x,y,z) and detected surface normal (nx,ny,nz))</div>
<div class=tab>14: retrieves force sensor data (in intData (1 values): force sensor state. In floatData (6 values): force (fx,fy,fz) and torque (tx,ty,tz))</div>
<div class=tab>15: retrieves joint state data (in floatData (2 values): position, force/torque)</div>
<div class=tab>16: retrieves joint properties data (in intData (2 values): joint type, joint mode (bit16=hybid operation). In floatData (2 values): joint limit low, joint range (-1.0 if joint is cyclic))</div>
<div class=tab>17: retrieves the object linear velocity (in floatData. There are 3 values for each object (vx,vy,vz))</div>
<div class=tab>18: retrieves the object angular velocity as <a href="eulerAngles.htm">Euler angles</a> per seconds (in floatData. There are 3 values for each object (dAlpha,dBeta,dGamma))</div>
<div class=tab>19: retrieves the object linear and angular velocity (i.e. twist data) (in floatData. There are 6 values for each object (vx,vy,vz,dAlpha,dBeta,dGamma))</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>handles (int32[])</strong>: the object handles</div>
<div><strong>intData (int32[])</strong>: the integer data</div>
<div><strong>floatData (float32[])</strong>: the float data</div>
<div><strong>strings (string[])</strong>: the strings</div>
</td> 
</tr> 
</table> 
<br>















<h3 class=subsectionBar>
<a name="simRosGetObjectHandle" id="simRosGetObjectHandle"></a>simRosGetObjectHandle 
<div class=tab>regular API equivalent: <a href="regularApi/simGetObjectHandle.htm">simGetObjectHandle</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetObjectHandle">simxGetObjectHandle</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves an object handle based on its name. See also <a href="#simRosGetObjectGroupData">simRosGetObjectGroupData</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>objectName (string)</strong>: name of the object. If possibe, don't rely on the <a href="accessingGeneralObjects.htm">automatic name adjustment mechanism</a>, and always specify the full object name, including the #: if the object is &quot;myJoint&quot;, specify &quot;myJoint#&quot;, if the object is &quot;myJoint#0&quot;, specify &quot;myJoint#0&quot;, etc.</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>handle (int32)</strong>: -1 if operation was not successful, otherwise the handle of the object</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetObjectIntParameter" id="simRosGetObjectIntParameter"></a>simRosGetObjectIntParameter 
<div class=tab>regular API equivalent: <a href="regularApi/simGetObjectInt32Parameter.htm">simGetObjectInt32Parameter</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetObjectIntParameter">simxGetObjectIntParameter</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves an integer parameter of a object. See also <a href="#simRosSetObjectIntParameter">simRosSetObjectIntParameter</a> and <a href="#simRosGetObjectFloatParameter">simRosGetObjectFloatParameter</a>.
<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_object_int_parameter">simros_strmcmd_get_object_int_parameter</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the object</div>
<div><strong>parameterID (int32)</strong>: identifier of the parameter to retrieve. See the <a href="objectParameterIDs.htm">list of all possible object parameter identifiers</a></div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
<div><strong>parameterValue (int32)</strong>: the value of the parameter</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetObjectParent" id="simRosGetObjectParent"></a>simRosGetObjectParent 
<div class=tab>regular API equivalent: <a href="regularApi/simGetObjectParent.htm">simGetObjectParent</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetObjectParent">simxGetObjectParent</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves the handle of an object's parent object. See also <a href="#simRosGetObjectChild">simRosGetObjectChild</a> and <a href="#simRosGetObjectGroupData">simRosGetObjectGroupData</a>.<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_object_parent">simros_strmcmd_get_object_parent</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the object</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>parentHandle (int32)</strong>: -1 if operation was not successful, otherwise the handle of the parent object</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetObjectPose" id="simRosGetObjectPose"></a>simRosGetObjectPose 
<div class=tab>regular API equivalent: <a href="regularApi/simGetObjectPosition.htm">simGetObjectPosition</a>/<a href="regularApi/simGetObjectQuaternion.htm">simGetObjectQuaternion</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetObjectPosition">simxGetObjectPosition</a>/<a href="remoteApiFunctions.htm#simxGetObjectOrientation">simxGetObjectOrientation</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves the pose  of an object (position and orientation). See also <a href="#simRosSetObjectPose">simRosSetObjectPose</a>, <a href="#simRosSetObjectPosition">simRosSetObjectPosition</a>, <a href="#simRosSetObjectQuaternion">simRosSetObjectQuaternion</a>and <a href="#simRosGetObjectGroupData">simRosGetObjectGroupData</a>.<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_object_pose">simros_strmcmd_get_object_pose</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the object</div>
<div><strong>relativeToObjectHandle (int32)</strong>: indicates relative to which reference frame we want the position.   Specify -1 to retrieve the absolute position, sim_handle_parent to   retrieve the position relative to the object's parent, or an object   handle relative to whose reference frame you want the position</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
<div><strong>pose (geometry_msgs/PoseStamped)</strong>: the object pose (position and quaternion). Refer to the ROS documentation.</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetObjects" id="simRosGetObjects"></a>simRosGetObjects 
<div class=tab>regular API equivalent: <a href="regularApi/simGetObjects.htm">simGetObjects</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetObjects">simxGetObjects</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves object handles of a given type, or of all types (i.e. all object handles).
See also <a href="#simRosGetObjectGroupData">simRosGetObjectGroupData</a>.<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_objects">simros_strmcmd_get_objects</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>objectType (int32)</strong>: <a href="apiConstants.htm#sceneObjectTypes">object type</a> (sim_object_shape_type, sim_object_joint_type, etc., or sim_handle_all for any type of object</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful, otherwise the number of returned object</div>
<div><strong>objectHandles (int32[])</strong>: the returned object handles.</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetObjectSelection" id="simRosGetObjectSelection"></a>simRosGetObjectSelection 
<div class=tab>regular API equivalent: <a href="regularApi/simGetObjectSelection.htm">simGetObjectSelection</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetObjectSelection">simxGetObjectSelection</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves all selected object's handles. See also <a href="#simRosSetObjectSelection">simRosSetObjectSelection</a>.
<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_object_selection">simros_strmcmd_get_object_selection</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div>-</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>handles (int32[])</strong>: the selected object handles</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetStringParameter" id="simRosGetStringParameter"></a>simRosGetStringParameter 
<div class=tab>regular API equivalent: <a href="regularApi/simGetStringParameter.htm">simGetStringParameter</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetStringParameter">simxGetStringParameter</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves a string value. See the <a href="apiConstants.htm#stringParameters">string parameter identifiers</a>. See also <a href="#simRosGetBooleanParameter">simRosGetBooleanParameter</a>, <a href="#simRosGetIntegerParameter">simRosGetIntegerParameter</a>, <a href="#simRosGetArrayParameter">simRosGetArrayParameter</a> and <a href="#simRosGetFloatingParameter">simRosGetFloatingParameter</a>.
<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_string_parameter">simros_strmcmd_get_string_parameter</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>parameter (int32)</strong>: a <a href="apiConstants.htm#stringParameters">string parameter identifier</a></div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
<div><strong>parameterValue (string)</strong>: the parameter value</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetStringSignal" id="simRosGetStringSignal"></a>simRosGetStringSignal 
<div class=tab>regular API equivalent: <a href="regularApi/simGetStringSignal.htm">simGetStringSignal</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetStringSignal">simxGetStringSignal</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Gets the value of a string signal. Signals are cleared at simulation start. See also <a href="#simRosSetStringSignal">simRosSetStringSignal</a>, <a href="#simRosClearStringSignal">simRosClearStringSignal</a>, <a href="#simRosGetIntegerSignal">simRosGetIntegerSignal</a> and <a href="#simRosGetFloatSignal">simRosGetFloatSignal</a>.
<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_string_signal">simros_strmcmd_get_string_signal</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>signalName (string)</strong>: name of the signal</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful, 0 if the signal does not exist. 1 otherwise.</div>
<div><strong>signalValue (string)</strong>: the value of the signal, which may contain any data (also embedded zeros).</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetUIButtonProperty" id="simRosGetUIButtonProperty"></a>simRosGetUIButtonProperty 
<div class=tab>regular API equivalent: <a href="regularApi/simGetUIButtonProperty.htm">simGetUIButtonProperty</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetUIButtonProperty">simxGetUIButtonProperty</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves the properties of an OpenGl-based custom UI button. See also <a href="#simRosSetUIButtonProperty">simRosSetUIButtonProperty</a>.
<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_ui_button_property">simros_strmcmd_get_ui_button_property</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>uiHandle (int32)</strong>: handle of the OpenGl-based custom UI</div>
<div><strong>buttonID (int32)</strong>: handle (or id) of the OpenGl-based custom UI button</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>propertyValue (int32)</strong>: -1 if operation was not successful, otherwise a <a href="apiConstants.htm#uiButtonProperties">button property value</a>.</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetUIEventButton" id="simRosGetUIEventButton"></a>simRosGetUIEventButton 
<div class=tab>regular API equivalent: <a href="regularApi/simGetUIEventButton.htm">simGetUIEventButton</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetUIEventButton">simxGetUIEventButton</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Gets the button handle (i.e. ID) and some auxiliary values of the last occurred event in that OpenGl-based custom UI. The function will then clear the event. When an OpenGl-based custom UI button is pressed, a slider is moved or an edit box is changed, an event is registered and stored in the OpenGl-based custom UI.
<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_ui_event_button">simros_strmcmd_get_ui_event_button</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>uiHandle (int32)</strong>: handle of the OpenGl-based custom UI</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>buttonID (int32)</strong>: id of the UI button where an event occured, or -1 if no event occured or the operation was not successful</div>
<div><strong>auxValues (int32[])</strong>: 2 values:</div>
<div class=tab>value1: the <a href="apiConstants.htm#uiButtonProperties">button property</a></div>
<div class=tab>value2: for sliders: slider state (0-1000), for stay down buttons: down state (0 or 1), for up/down event buttons: up/down events (0 or 1)</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetUIHandle" id="simRosGetUIHandle"></a>simRosGetUIHandle 
<div class=tab>regular API equivalent: <a href="regularApi/simGetUIHandle.htm">simGetUIHandle</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetUIHandle">simxGetUIHandle</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves the handle of an OpenGl-based custom UI. See also <a href="#simRosGetObjectGroupData">simRosGetObjectGroupData</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>uiName (string)</strong>: name of the UI. If possibe, don't rely on the <a href="accessingGeneralObjects.htm">automatic name adjustment mechanism</a>, and always specify the full object name, including the #: if the UI is &quot;myUI&quot;, specify &quot;myUI#&quot;, if the UI is &quot;myUI#0&quot;, specify &quot;myUI#0&quot;, etc.</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>handle (int32)</strong>: -1 if operation was not successful, otherwise the handle</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetUISlider" id="simRosGetUISlider"></a>simRosGetUISlider 
<div class=tab>regular API equivalent: <a href="regularApi/simGetUISlider.htm">simGetUISlider</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetUISlider">simxGetUISlider</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Gets the slider position of an OpenGl-based custom UI button (must be slider-type button). See also <a href="#simRosSetUISlider">simRosSetUISlider</a>.
<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_ui_slider">simros_strmcmd_get_ui_slider</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>uiHandle (int32)</strong>: handle of the OpenGl-based custom UI</div>
<div><strong>buttonID (int32)</strong>: handle of a button inside the specified OpenGl-based custom UI</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>position (int32)</strong>: -1 if operation was not successful, otherwise the slider position (value between 0 and 1000)</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetVisionSensorDepthBuffer" id="simRosGetVisionSensorDepthBuffer"></a>simRosGetVisionSensorDepthBuffer 
<div class=tab>regular API equivalent: <a href="regularApi/simGetVisionSensorDepthBuffer.htm">simGetVisionSensorDepthBuffer</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetVisionSensorDepthBuffer">simxGetVisionSensorDepthBuffer</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves the depth buffer of a vision sensor. The returned data doesn't make sense if <a href="regularApi/simHandleVisionSensor.htm">simHandleVisionSensor</a> wasn't called previously (simHandleVisionSensor is called by default in the main script if the vision sensor is not tagged as explicit handling). See also <a href="#simRosGetVisionSensorImage">simRosGetVisionSensorImage</a>.
<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_vision_sensor_depth_buffer">simros_strmcmd_get_vision_sensor_depth_buffer</a></div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the vision sensor</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
<div><strong>resolution (int32[])</strong>: 2 values for the resolution of the image</div>
<div><strong>buffer (float32[])</strong>: the depth buffer data. Values are in the range of 0-1 (0=closest to sensor, 1=farthest from sensor).</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosGetVisionSensorImage" id="simRosGetVisionSensorImage"></a>simRosGetVisionSensorImage 
<div class=tab>regular API equivalent: <a href="regularApi/simGetVisionSensorImage.htm">simGetVisionSensorImage</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxGetVisionSensorImage">simxGetVisionSensorImage</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Retrieves the image of a vision sensor. The returned data doesn't make sense if <a href="regularApi/simHandleVisionSensor.htm">simHandleVisionSensor</a> wasn't called previously (simHandleVisionSensor is called by default in the main script if the vision sensor is not tagged as explicit handling). See also <a href="#simRosSetVisionSensorImage">simRosSetVisionSensorImage</a>, <a href="#simRosGetVisionSensorDepthBuffer">simRosGetVisionSensorDepthBuffer</a> and <a href="#simRosReadVisionSensor">simRosReadVisionSensor</a>.
<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_get_vision_sensor_image">simros_strmcmd_get_vision_sensor_image</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the vision sensor</div>
<div><strong>options (uint8)</strong>: image options, bit-coded:</div>
<div class=tab>bit0 set: each image pixel is a byte (greyscale image (MONO8)), otherwise each image pixel is a rgb byte-triplet (RGB8).</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
<div><strong>image (sensor_msgs/Image)</strong>: the image. Refer to the ROS documentation</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosLoadModel" id="simRosLoadModel"></a>simRosLoadModel 
<div class=tab>regular API equivalent: <a href="regularApi/simLoadModel.htm">simLoadModel</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxLoadModel">simxLoadModel</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Loads a previously saved model. See also <a href="#simRosLoadUI">simRosLoadUI</a>, <a href="#simRosLoadScene">simRosLoadScene</a> and <a href="#simRosTransferFile">simRosTransferFile</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>fileName (string)</strong>: the model filename, including the path and extension ("ttm"). The file is relative to the server system (V-REP application)</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
<div><strong>baseHandle (int32)</strong>: the loaded model base.</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosLoadScene" id="simRosLoadScene"></a>simRosLoadScene 
<div class=tab>regular API equivalent: <a href="regularApi/simLoadScene.htm">simLoadScene</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxLoadScene">simxLoadScene</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Loads a previously saved scene. Should only be called when simulation is not running. See also <a href="#simRosCloseScene">simRosCloseScene</a>, <a href="#simRosLoadModel">simRosLoadModel</a>, <a href="#simRosLoadUI">simRosLoadUI</a> and <a href="#simRosTransferFile">simRosTransferFile</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>fileName (string)</strong>: the scene filename, including the path and extension ("ttt"). The file is relative to the server system (V-REP application)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosLoadUI" id="simRosLoadUI"></a>simRosLoadUI 
<div class=tab>regular API equivalent: <a href="regularApi/simLoadUI.htm">simLoadUI</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxLoadUI">simxLoadUI</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Loads previously saved OpenGl-based custom UIs. See also <a href="#simRosLoadModel">simRosLoadModel</a>, <a href="#simRosLoadScene">simRosLoadScene</a> and <a href="#simRosTransferFile">simRosTransferFile</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>fileName (string)</strong>: the ui filename, including the path and extension ("ttb"). The file is relative to the server system (V-REP application)</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
<div><strong>uiHandles (int32[])</strong>: the loaded UI handles.</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosPauseSimulation" id="simRosPauseSimulation"></a>simRosPauseSimulation 
<div class=tab>regular API equivalent: <a href="regularApi/simPauseSimulation.htm">simPauseSimulation</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxPauseSimulation">simxPauseSimulation</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Requests a pause of a simulation. See also <a href="#simRosStartSimulation">simRosStartSimulation</a> and <a href="#simRosStopSimulation">simRosStopSimulation</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosReadCollision" id="simRosReadCollision"></a>simRosReadCollision 
<div class=tab>regular API equivalent: <a href="regularApi/simReadCollision.htm">simReadCollision</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxReadCollision">simxReadCollision</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Reads the collision state of a registered collision object. This function doesn't perform collision detection, it merely reads the result from a previous call to <a href="regularApi/simHandleCollision.htm">simHandleCollision</a> (simHandleCollision is called in the default main script). 
See also <a href="#simRosGetObjectGroupData">simRosGetObjectGroupData</a>.<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_read_collision">simros_strmcmd_read_collision</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the collision object</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>collisionState (int32)</strong>: -1 if operation was not successful, otherwise the collision state</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosReadDistance" id="simRosReadDistance"></a>simRosReadDistance 
<div class=tab>regular API equivalent: <a href="regularApi/simReadDistance.htm">simReadDistance</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxReadDistance">simxReadDistance</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Reads the distance that a  registered distance object measured. This function doesn't perform minimum distance calculation, it merely reads the result from a previous call to <a href="regularApi/simHandleDistance.htm">simHandleDistance</a> (simHandleDistance is called in the default main script). 
See also <a href="#simRosGetObjectGroupData">simRosGetObjectGroupData</a>.<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_read_distance">simros_strmcmd_read_distance</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the distance object</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
<div><strong>distance (float32)</strong>: the minimum distance</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosReadForceSensor" id="simRosReadForceSensor"></a>simRosReadForceSensor 
<div class=tab>regular API equivalent: <a href="regularApi/simReadForceSensor.htm">simReadForceSensor</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxReadForceSensor">simxReadForceSensor</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Reads the force and torque applied to a force sensor (filtered values are read), and its current state ('unbroken' or 'broken'). See also <a href="#simRosBreakForceSensor">simRosBreakForceSensor,</a> <a href="#simRosGetJointState">simRosGetJointState</a>and <a href="#simRosGetObjectGroupData">simRosGetObjectGroupData</a>.<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_read_force_sensor">simros_strmcmd_read_force_sensor</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the force sensor</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful, otherwise bit-coded value:</div>
<div class=tab>bit 0 set: force and torque data is available, otherwise it is not (yet) available (e.g. when not enough values are present for the filter)</div>
<div class=tab>bit 1 set: force sensor is broken, otherwise it is still intact ('unbroken')</div>
<div><strong>force (geometry_msgs/Vector3)</strong>: the force vector</div>
<div><strong>torque (geometry_msgs/Vector3)</strong>: the torque vector</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosReadProximitySensor" id="simRosReadProximitySensor"></a>simRosReadProximitySensor 
<div class=tab>regular API equivalent: <a href="regularApi/simReadProximitySensor.htm">simReadProximitySensor</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxReadProximitySensor">simxReadProximitySensor</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Reads the state of a proximity sensor. This function doesn't perform detection, it merely reads the result from a previous call to <a href="regularApi/simHandleProximitySensor.htm">simHandleProximitySensor</a> (simHandleProximitySensor is called in the default main script).
See also <a href="#simRosGetObjectGroupData">simRosGetObjectGroupData</a>.<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_read_proximity_sensor">simros_strmcmd_read_proximity_sensor</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the proximity sensor</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful, otherwise the detection state</div>
<div><strong>detectedPoint (float32[])</strong>: the detected point coordinates (relative to the sensor reference frame).</div>
<div><strong>detectedObject (int32)</strong>: the handle of the detected object.</div>
<div><strong>normalVector (float32[])</strong>: the normal vector (normalized) of the detected surface. Relative to the sensor reference frame.</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosReadVisionSensor" id="simRosReadVisionSensor"></a>simRosReadVisionSensor 
<div class=tab>regular API equivalent: <a href="regularApi/simReadVisionSensor.htm">simReadVisionSensor</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxReadVisionSensor">simxReadVisionSensor</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Reads the state of a vision sensor. This function doesn't perform detection, it merely reads the result from a previous call to <a href="regularApi/simHandleVisionSensor.htm">simHandleVisionSensor</a> (simHandleVisionSensor is called in the default main script). See also <a href="#simRosGetVisionSensorImage">simRosGetVisionSensorImage</a>and <a href="#simRosGetObjectGroupData">simRosGetObjectGroupData</a>.<br>
<br>
<div>Equivalent topic publishing command: <a href="rosPublisherTypes.htm#simros_strmcmd_read_vision_sensor">simros_strmcmd_read_vision_sensor</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the vision sensor</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful, otherwise the detection state (trigger state)</div>
<div><strong>packetData (float32[])</strong>: auxiliary values returned from the <a href="visionSensorFilterComposition.htm">applied filters</a>. By default V-REP returns one packet of 15 auxiliary values:the minimum of {intensity, red, green, blue, depth value}, the maximum of {intensity, red, green, blue, depth value}, and the average of {intensity, red, green, blue, depth value}. If additional filter components return values, then they will be appended as packets to the first packet. </div>
<div><strong>packetSizes (int32[])</strong>: contains information about the packet sizes. The first value is the size of packet 1, the second value the size of packet 2, etc.</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosRemoveModel" id="simRosRemoveModel"></a>simRosRemoveModel 
<div class=tab>regular API equivalent: <a href="regularApi/simRemoveModel.htm">simRemoveModel</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxRemoveModel">simxRemoveModel</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Removes a model from the scene. See also <a href="#simRosRemoveObject">simRosRemoveObject</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the model to remove (specified object should be flagged as <em>model base</em>).</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosRemoveObject" id="simRosRemoveObject"></a>simRosRemoveObject 
<div class=tab>regular API equivalent: <a href="regularApi/simRemoveObject.htm">simRemoveObject</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxRemoveObject">simxRemoveObject</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Removes a scene object. See also <a href="#simRosRemoveModel">simRosRemoveModel</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the object to remove</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosRemoveUI" id="simRosRemoveUI"></a>simRosRemoveUI 
<div class=tab>regular API equivalent: <a href="regularApi/simRemoveUI.htm">simRemoveUI</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxRemoveUI">simxRemoveUI</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Removes an OpenGl-based custom UI.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the OpenGl-based custom UI</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSetArrayParameter" id="simRosSetArrayParameter"></a>simRosSetArrayParameter 
<div class=tab>regular API equivalent: <a href="regularApi/simSetArrayParameter.htm">simSetArrayParameter</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetArrayParameter">simxSetArrayParameter</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets 3 values of an <a href="apiConstants.htm#arrayParameters">array parameter</a>. See also <a href="#simRosGetArrayParameter">simRosGetArrayParameter</a>, <a href="#simRosSetBooleanParameter">simRosSetBooleanParameter</a>, <a href="#simRosSetIntegerParameter">simRosSetIntegerParameter</a> and <a href="#simRosSetFloatingParameter">simRosSetFloatingParameter</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_array_parameter">simros_strmcmd_set_array_parameter</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>parameter (int32)</strong>: an <a href="apiConstants.htm#arrayParameters">array parameter identifier</a></div>
<div><strong>parameterValues (float32[])</strong>: the array containing the 3 values to set</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSetBooleanParameter" id="simRosSetBooleanParameter"></a>simRosSetBooleanParameter 
<div class=tab>regular API equivalent: <a href="regularApi/simSetBoolParameter.htm">simSetBoolParameter</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetBooleanParameter">simxSetBooleanParameter</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets a <a href="apiConstants.htm#booleanParameters">boolean parameter</a>. See also <a href="#simRosGetBooleanParameter">simRosGetBooleanParameter</a>, <a href="#simRosSetIntegerParameter">simRosSetIntegerParameter</a>, <a href="#simRosSetArrayParameter">simRosSetArrayParameter</a> and <a href="#simRosSetFloatingParameter">simRosSetFloatingParameter</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_boolean_parameter">simros_strmcmd_set_boolean_parameter</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>parameter (int32)</strong>: a <a href="apiConstants.htm#booleanParameters">Boolean parameter identifier</a></div>
<div><strong>parameterValue (uint8)</strong>: the parameter value</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSetFloatingParameter" id="simRosSetFloatingParameter"></a>simRosSetFloatingParameter 
<div class=tab>regular API equivalent: <a href="regularApi/simSetFloatParameter.htm">simSetFloatParameter</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetFloatingParameter">simxSetFloatingParameter</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets a <a href="apiConstants.htm#floatingParameters">floating point parameter</a>. See also <a href="#simRosGetFloatingParameter">simRosGetFloatingParameter</a>, <a href="#simRosSetBooleanParameter">simRosSetBooleanParameter</a>, <a href="#simRosSetArrayParameter">simRosSetArrayParameter</a> and <a href="#simRosSetIntegerParameter">simRosSetIntegerParameter</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_floating_parameter">simros_strmcmd_set_floating_parameter</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>parameter (int32)</strong>: a <a href="apiConstants.htm#floatingParameters">floating parameter identifier</a></div>
<div><strong>parameterValue (float32)</strong>: the parameter value</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSetFloatSignal" id="simRosSetFloatSignal"></a>simRosSetFloatSignal 
<div class=tab>regular API equivalent: <a href="regularApi/simSetFloatSignal.htm">simSetFloatSignal</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetFloatSignal">simxSetFloatSignal</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the value of a float signal. If that signal is not yet present, it is added. See also <a href="#simRosGetFloatSignal">simRosGetFloatSignal</a>, <a href="#simRosClearFloatSignal">simRosClearFloatSignal</a>, <a href="#simRosSetIntegerSignal">simRosSetIntegerSignal</a> and <a href="#simRosSetStringSignal">simRosSetStringSignal</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_float_signal">simros_strmcmd_set_float_signal</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>signalName (string)</strong>: name of the signal</div>
<div><strong>signalValue (float32)</strong>: value of the signal</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSetIntegerParameter" id="simRosSetIntegerParameter"></a>simRosSetIntegerParameter 
<div class=tab>regular API equivalent: <a href="regularApi/simSetInt32Parameter.htm">simSetInt32Parameter</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetIntegerParameter">simxSetIntegerParameter</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets an <a href="apiConstants.htm#integerParameters">integer parameter</a>. See also <a href="#simRosGetIntegerParameter">simRosGetIntegerParameter</a>, <a href="#simRosSetBooleanParameter">simRosSetBooleanParameter</a>, <a href="#simRosSetArrayParameter">simRosSetArrayParameter</a> and <a href="#simRosSetFloatingParameter">simRosSetFloatingParameter</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_integer_parameter">simros_strmcmd_set_integer_parameter</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>parameter (int32)</strong>: an <a href="apiConstants.htm#integerParameters">integer parameter identifier</a></div>
<div><strong>parameterValue (int32)</strong>: the parameter value</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSetIntegerSignal" id="simRosSetIntegerSignal"></a>simRosSetIntegerSignal 
<div class=tab>regular API equivalent: <a href="regularApi/simSetIntegerSignal.htm">simSetIntegerSignal</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetIntegerSignal">simxSetIntegerSignal</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the value of an integer signal. If that signal is not yet present, it is added. See also <a href="#simRosGetIntegerSignal">simRosGetIntegerSignal</a>, <a href="#simRosClearIntegerSignal">simRosClearIntegerSignal</a>, <a href="#simRosSetFloatSignal">simRosSetFloatSignal</a> and <a href="#simRosSetStringSignal">simRosSetStringSignal</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_integer_signal">simros_strmcmd_set_integer_signal</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>signalName (string)</strong>: name of the signal</div>
<div><strong>signalValue (int32)</strong>: value of the signal</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSetJointForce" id="simRosSetJointForce"></a>simRosSetJointForce 
<div class=tab>regular API equivalent: <a href="regularApi/simSetJointForce.htm">simSetJointForce</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetJointForce">simxSetJointForce</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the maximum force or torque that a joint can exert. This function has no effect when the joint is not dynamically enabled, or when it is a spherical joint. See also <a href="#simRosSetJointState">simRosSetJointState</a> and <a href="#simRosGetJointState">simRosGetJointState</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_joint_force">simros_strmcmd_set_joint_force</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the joint</div>
<div><strong>forceOrTorque (float64)</strong>: the maximum force or torque that the joint can exert
</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>























<h3 class=subsectionBar>
<a name="simRosSetJointPosition" id="simRosSetJointPosition"></a>simRosSetJointPosition 
<div class=tab>regular API equivalent: <a href="regularApi/simSetJointPosition.htm">simSetJointPosition</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetJointPosition">simxSetJointPosition</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the intrinsic position of a joint. May have no effect depending on the joint mode. This function cannot be used with spherical joints (use <a href="#simRosSetSphericalJointMatrix">simRosSetSphericalJointMatrix</a> instead). See also <a href="#simRosSetJointState">simRosSetJointState</a>, <a href="#simRosGetJointState">simRosGetJointState</a> and <a href="#simRosSetJointTargetPosition">simRosSetJointTargetPosition</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_joint_position">simros_strmcmd_set_joint_position</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the joint</div>
<div><strong>position (float64)</strong>: position of the joint (angular or linear value depending on the joint type)
</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>











<h3 class=subsectionBar>
<a name="simRosSetJointState" id="simRosSetJointState"></a>simRosSetJointState 
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Allows setting the state of several joints at the same time. You can set a joint's position, target position (when in position control mode), target velocity (when in velocity mode), or maximum force. This function cannot be used with spherical joints (use <a href="#simRosSetSphericalJointMatrix">simRosSetSphericalJointMatrix</a> instead). See also <a href="#simRosGetJointState">simRosGetJointState</a>, <a href="#simRosSetJointPosition">simRosSetJointPosition</a>, <a href="#simRosSetJointTargetPosition">simRosSetJointTargetPosition</a>, <a href="#simRosSetJointTargetVelocity">simRosSetJointTargetVelocity</a> and <a href="#simRosSetJointForce">simRosSetJointForce</a>. <br>
<br>
<div>Equivalent topic subscription command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_joint_state">simros_strmcmd_set_joint_state</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handles (int32[])</strong>: handles of the joints. For each handle there must be a specific setMode and value to set.</div>
<div><strong>setModes (int32[])</strong>: joint set modes:</div>
<div class=tab>0: sets the position</div>
<div class=tab>1: sets the target position (when joint is dynamically enabled and in position control)</div>
<div class=tab>2: sets the target velocity (when joint is dynamically enabled without position control, or when joint is in velocity mode)</div>
<div class=tab>3: sets the maximum force/torque that the joint can exert</div>
<div><strong>values (float32[])</strong>: values to set</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful, otherwise the number of successfully set joint values</div>
</td> 
</tr> 
</table> 
<br>












<h3 class=subsectionBar>
<a name="simRosSetJointTargetPosition" id="simRosSetJointTargetPosition"></a>simRosSetJointTargetPosition 
<div class=tab>regular API equivalent: <a href="regularApi/simSetJointTargetPosition.htm">simSetJointTargetPosition</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetJointTargetPosition">simxSetJointTargetPosition</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the target position of a joint if the joint is in torque/force mode (also make sure that the joint's motor and position control are enabled). See also <a href="#simRosSetJointState">simRosSetJointState</a> and <a href="#simRosSetJointPosition">simRosSetJointPosition</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_joint_target_position">simros_strmcmd_set_joint_target_position</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the joint</div>
<div><strong>targetPosition (float64)</strong>: target position of the joint (angular or linear value depending on the joint type)</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSetJointTargetVelocity" id="simRosSetJointTargetVelocity"></a>simRosSetJointTargetVelocity 
<div class=tab>regular API equivalent: <a href="regularApi/simSetJointTargetVelocity.htm">simSetJointTargetVelocity</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetJointTargetVelocity">simxSetJointTargetVelocity</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the intrinsic target velocity of a non-spherical joint. This command makes only sense when the joint mode is in torque/force mode: the dynamics functionality and the joint motor have to be enabled (position control should however be disabled).
See also <a href="#simRosSetJointState">simRosSetJointState</a>.<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_joint_target_velocity">simros_strmcmd_set_joint_target_velocity</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the joint</div>
<div><strong>targetVelocity (float64)</strong>: target velocity of the joint (linear or angular velocity depending on the joint-type)</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSetModelProperty" id="simRosSetModelProperty"></a>simRosSetModelProperty 
<div class=tab>regular API equivalent: <a href="regularApi/simSetModelProperty.htm">simSetModelProperty</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetModelProperty">simxSetModelProperty</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the properties of a model. See also <a href="#simRosGetModelProperty">simRosGetModelProperty</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the object</div>
<div><strong>propertyValue (int32)</strong>: a <a href="apiConstants.htm#modelProperties">model property value</a></div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSetObjectFloatParameter" id="simRosSetObjectFloatParameter"></a>simRosSetObjectFloatParameter 
<div class=tab>regular API equivalent: <a href="regularApi/simSetObjectFloatParameter.htm">simSetObjectFloatParameter</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetObjectFloatParameter">simxSetObjectFloatParameter</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets a floating-point parameter of a object. See also <a href="#simRosGetObjectFloatParameter">simRosGetObjectFloatParameter</a> and <a href="#simRosSetObjectIntParameter">simRosSetObjectIntParameter</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_object_float_parameter">simros_strmcmd_set_object_float_parameter</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the object</div>
<div><strong>parameter (int32)</strong>: identifier of the parameter to set. See the <a href="objectParameterIDs.htm">list of all possible object parameter identifiers</a></div>
<div><strong>parameterValue (float32)</strong>: the desired value of the parameter</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSetObjectIntParameter" id="simRosSetObjectIntParameter"></a>simRosSetObjectIntParameter 
<div class=tab>regular API equivalent: <a href="regularApi/simSetObjectInt32Parameter.htm">simSetObjectInt32Parameter</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetObjectIntParameter">simxSetObjectIntParameter</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets an integer parameter of a object. See also <a href="#simRosGetObjectIntParameter">simRosGetObjectIntParameter</a> and <a href="#simRosSetObjectFloatParameter">simRosSetObjectFloatParameter</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_object_int_parameter">simros_strmcmd_set_object_int_parameter</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the object</div>
<div><strong>parameter (int32)</strong>: identifier of the parameter to set. See the <a href="objectParameterIDs.htm">list of all possible object parameter identifiers</a></div>
<div><strong>parameterValue (int32)</strong>: the desired value of the parameter</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSetObjectParent" id="simRosSetObjectParent"></a>simRosSetObjectParent 
<div class=tab>regular API equivalent: <a href="regularApi/simSetObjectParent.htm">simSetObjectParent</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetObjectParent">simxSetObjectParent</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets an object's parent object. See also <a href="#simRosGetObjectParent">simRosGetObjectParent</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the object that will become child of the parent object.  Can be combined with <a href="apiConstants.htm#specialHandleFlags">sim_handleflag_assembly</a>, if the two objects can be assembled via a predefined assembly transformation (refer to the <strong>assembling</strong> option in the <a href="commonPropertiesDialog.htm">object common properties</a>). In that case, <strong>parentObject</strong> can't be -1, and <strong>keepInPlace</strong> should be set to 0.</div>
<div><strong>parentHandle (int32)</strong>: handle of the object that will become parent, or -1 if the object should become parentless</div>
<div><strong>keepInPlace (uint8)</strong>: indicates whether the object's absolute position and orientation should stay same</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSetObjectPose" id="simRosSetObjectPose"></a>simRosSetObjectPose 
<div class=tab>regular API equivalent: <a href="regularApi/simSetObjectPosition.htm">simSetObjectPosition</a>/<a href="regularApi/simSetObjectQuaternion.htm">simSetObjectQuaternion</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetObjectPosition">simxSetObjectPosition</a>/<a href="remoteApiFunctions.htm#simxSetObjectOrientation">simxSetObjectOrientation</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the pose (position and orientation) of an object. Dynamically simulated objects will implicitely be reset before the command is applied (i.e. similar to calling  <a href="regularApi/simResetDynamicObject.htm">simResetDynamicObject</a> just before). See also <a href="#simRosGetObjectPose">simRosGetObjectPose</a>,  <a href="#simRosSetObjectPosition">simRosSetObjectPosition</a>, and <a href="#simRosSetObjectQuaternion">simRosSetObjectQuaternion</a>. <br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_object_pose">simros_strmcmd_set_object_pose</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the object</div>
<div><strong>relativeToObjectHandle (int32)</strong>: indicates relative to which reference frame the pose is specified. Specify -1 to set the absolute pose, sim_handle_parent to set the posed relative to the object's parent, or an object handle relative to whose reference frame the pose is specified.</div>
<div><strong>pose (geometry_msgs/Pose)</strong>: the desired pose. Refer to the ROS documentation</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSetObjectPosition" id="simRosSetObjectPosition"></a>simRosSetObjectPosition 
<div class=tab>regular API equivalent: <a href="regularApi/simSetObjectPosition.htm">simSetObjectPosition</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetObjectPosition">simxSetObjectPosition</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the position of an object. Dynamically simulated objects will implicitely be reset before the command is applied (i.e. similar to calling  <a href="regularApi/simResetDynamicObject.htm">simResetDynamicObject</a> just before). See also <a href="#simRosGetObjectPose">simRosGetObjectPose</a> ,<a href="#simRosSetObjectPose">simRosSetObjectPose</a>, and <a href="#simRosSetObjectQuaternion">simRosSetObjectQuaternion</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_object_position">simros_strmcmd_set_object_position</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the object</div>
<div><strong>relativeToObjectHandle (int32)</strong>: indicates relative to which reference frame the position is specified. Specify -1 to set the absolute position, sim_handle_parent to set the position relative to the object's parent, or an object handle relative to whose reference frame the position is specified.</div>
<div><strong>position (geometry_msgs/Point)</strong>: the position. Refer to the ROS documentation</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>














<h3 class=subsectionBar>
<a name="simRosSetObjectQuaternion" id="simRosSetObjectQuaternion"></a>simRosSetObjectQuaternion 
<div class=tab>regular API equivalent: <a href="regularApi/simSetObjectQuaternion.htm">simSetObjectQuaternion</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetObjectOrientation">simxSetObjectOrientation</a></div>
</h3>

<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the quaternion (x,y,z,w) of an object. Make sure to set a valid quaternion, otherwise you might experience strange behaviours. Dynamically simulated objects will implicitely be reset before the command is applied (i.e. similar to calling  <a href="regularApi/simResetDynamicObject.htm">simResetDynamicObject</a> just before). See also <a href="#simRosGetObjectPose">simRosGetObjectPose</a>, <a href="#simRosSetObjectPose">simRosSetObjectPose</a> and <a href="#simRosSetObjectPosition">simRosSetObjectPosition</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_object_quaternion">simros_strmcmd_set_object_quaternion</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the object</div>
<div><strong>relativeToObjectHandle (int32)</strong>: indicates relative to which reference frame the orientation is specified. Specify -1 to set the absolute orientation, sim_handle_parent to set the orientation relative to the object's parent, or an object handle relative to whose reference frame the orientation is specified.</div>
<div><strong>quaternion (geometry_msgs/Quaternion)</strong>: the quaternion (x,y,z,w). Refer to the ROS documentation</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSetObjectSelection" id="simRosSetObjectSelection"></a>simRosSetObjectSelection (remote API equivalent: <a href="remoteApiFunctions.htm#simxSetObjectSelection">simxSetObjectSelection</a>)
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the selection state for objects. See also <a href="#simRosGetObjectSelection">simRosGetObjectSelection</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_object_selection">simros_strmcmd_set_object_selection</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handles (int32[])</strong>: the object handles</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful, otherwise the number of selected objects</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSetSphericalJointMatrix" id="simRosSetSphericalJointMatrix"></a>simRosSetSphericalJointMatrix 
<div class=tab>regular API equivalent: <a href="regularApi/simSetSphericalJointMatrix.htm">simSetSphericalJointMatrix</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetSphericalJointMatrix">simxSetSphericalJointMatrix</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the intrinsic orientation matrix of a spherical joint object. This function cannot be used with non-spherical joints (use <a href="#simRosSetJointPosition">simRosSetJointPosition</a> instead). See also <a href="#simRosGetJointMatrix">simRosGetJointMatrix</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the joint</div>
<div><strong>quaternion (geometry_msgs/Quaternion)</strong>: the orientation. Refer to the ROS documentation</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>











<h3 class=subsectionBar>
<a name="simRosSetStringSignal" id="simRosSetStringSignal"></a>simRosSetStringSignal 
<div class=tab>regular API equivalent: <a href="regularApi/simSetStringSignal.htm">simSetStringSignal</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetStringSignal">simxSetStringSignal</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the value of a string signal. If that signal is not yet present, it is added. See also <a href="#simRosAppendStringSignal">simRosAppendStringSignal</a>, <a href="#simRosGetStringSignal">simRosGetStringSignal</a>, <a href="#simRosClearStringSignal">simRosClearStringSignal</a>, <a href="#simRosSetIntegerSignal">simRosSetIntegerSignal</a> and <a href="#simRosSetFloatSignal">simRosSetFloatSignal</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_string_signal">simros_strmcmd_set_string_signal</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>signalName (string)</strong>: name of the signal</div>
<div><strong>signalValue (string)</strong>: value of the signal (which may contain any value, including embedded zeros)</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosAppendStringSignal" id="simRosAppendStringSignal"></a>simRosAppendStringSignal (remote API equivalent: <a href="remoteApiFunctions.htm#simxAppendStringSignal">simxAppendStringSignal</a>)</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Appends a string to a string signal. If that signal is not yet present, it is added. See also <a href="#simRosSetStringSignal">simRosSetStringSignal</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_append_string_signal">simros_strmcmd_append_string_signal</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>signalName (string)</strong>: name of the signal</div>
<div><strong>signalValue (string)</strong>: string to append to the string signal. That string may contain any value, including embedded zeros.</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSetUIButtonLabel" id="simRosSetUIButtonLabel"></a>simRosSetUIButtonLabel 
<div class=tab>regular API equivalent: <a href="regularApi/simSetUIButtonLabel.htm">simSetUIButtonLabel</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetUIButtonLabel">simxSetUIButtonLabel</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the up-state and down-state labels of an OpenGl-based custom UI button.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_ui_button_label">simros_strmcmd_set_ui_button_label</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>uiHandle (int32)</strong>: handle of the OpenGl-based custom UI</div>
<div><strong>buttonID (int32)</strong>: handle (or ID) of the OpenGl-based custom UI button</div>
<div><strong>upStateLabel (string)</strong>: the label of the button when it is up.</div>
<div><strong>downStateLabel (string)</strong>: the label of the button when it is down.</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSetUIButtonProperty" id="simRosSetUIButtonProperty"></a>simRosSetUIButtonProperty 
<div class=tab>regular API equivalent: <a href="regularApi/simSetUIButtonProperty.htm">simSetUIButtonProperty</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetUIButtonProperty">simxSetUIButtonProperty</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the properties of an OpenGl-based custom UI button. See also <a href="#simRosGetUIButtonProperty">simRosGetUIButtonProperty</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_ui_button_property">simros_strmcmd_set_ui_button_property</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>uiHandle (int32)</strong>: handle of the OpenGl-based custom UI</div>
<div><strong>buttonID (int32)</strong>: handle (or ID) of the OpenGl-based custom UI button</div>
<div><strong>propertyValue (int32)</strong>: a <a href="apiConstants.htm#uiButtonProperties">button property value</a>.</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSetUISlider" id="simRosSetUISlider"></a>simRosSetUISlider 
<div class=tab>regular API equivalent: <a href="regularApi/simSetUISlider.htm">simSetUISlider</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetUISlider">simxSetUISlider</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the slider position of an OpenGl-based custom UI button (must be a slider-type button). See also <a href="#simRosGetUISlider">simRosGetUISlider</a>.
<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_ui_slider">simros_strmcmd_set_ui_slider</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>uiHandle (int32)</strong>: handle of the OpenGl-based custom UI</div>
<div><strong>buttonID (int32)</strong>: id of the button (slider) in the OpenGl-based custom UI</div>
<div><strong>position (int32)</strong>: slider position. valid values are between 0 and 1000</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSetVisionSensorImage" id="simRosSetVisionSensorImage"></a>simRosSetVisionSensorImage 
<div class=tab>regular API equivalent: <a href="regularApi/simSetVisionSensorImage.htm">simSetVisionSensorImage</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxSetVisionSensorImage">simxSetVisionSensorImage</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sets the image of a vision sensor (and applies any image processing filter if specified in the vision sensor dialog). Make sure the vision sensor is flagged as <strong>use external image</strong>. The &quot;regular&quot; use of this function is to first read the data from a vision sensor with <a href="#simRosGetVisionSensorImage">simRosGetVisionSensorImage</a>, do some custom filtering, then write the modified image to a passive vision sensor. The alternate use of this function is to display textures, video images, etc. by using a vision sensor object (without however making use of the vision sensor functionality), since a vision sensor can be &quot;looked through&quot; like camera objects.
Make sure the image data corresponds to the vision sensor's resolution.<br>
<br>
<div>Equivalent topic subscribtion command: <a href="rosSubscriberTypes.htm#simros_strmcmd_set_vision_sensor_image">simros_strmcmd_set_vision_sensor_image</a></div>
</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>handle (int32)</strong>: handle of the vision sensor</div>
<div><strong>image (sensor_msgs/Image)</strong>: the image. Has to be the same resolution as the vision sensor. Supported formats are RGB8 and MONO8. Refer to the ROS documentation</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosStartSimulation" id="simRosStartSimulation"></a>simRosStartSimulation 
<div class=tab>regular API equivalent: <a href="regularApi/simStartSimulation.htm">simStartSimulation</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxStartSimulation">simxStartSimulation</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Requests a start of a simulation (or a resume of a paused simulation). See also <a href="#simRosPauseSimulation">simRosPauseSimulation</a> and <a href="#simRosStopSimulation">simRosStopSimulation</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosStopSimulation" id="simRosStopSimulation"></a>simRosStopSimulation 
<div class=tab>regular API equivalent: <a href="regularApi/simStopSimulation.htm">simStopSimulation</a></div>
<div class=tab>remote API equivalent: <a href="remoteApiFunctions.htm#simxStopSimulation">simxStopSimulation</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Requests a stop of the running simulation. See also <a href="#simRosStartSimulation">simRosStartSimulation</a> and <a href="#simRosPauseSimulation">simRosPauseSimulation</a>.</td>
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div>-</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSynchronous" id="simRosSynchronous"></a>simRosSynchronous (remote API equivalent: <a href="remoteApiFunctions.htm#simxSynchronous">simxSynchronous</a>)
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Enables or disables the synchronous operation mode. While in synchronous operation mode, the client application is in charge of triggering the next simulation step. This function should only be called when simulation is not running. See also <a href="#simRosSynchronousTrigger">simRosSynchronousTrigger</a> and <a href="remoteApiModusOperandi.htm#synchronous">this section</a>. </td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>enable (uint8)</strong>: the enable state of the synchronous operation</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosSynchronousTrigger" id="simRosSynchronousTrigger"></a>simRosSynchronousTrigger (remote API equivalent: <a href="remoteApiFunctions.htm#simxSynchronousTrigger">simxSynchronousTrigger</a>)
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Sends a synchronization  trigger signal to the server. The server needs to be previously enabled for synchronous operation via the <a href="#simRosSynchronous">simRosSynchronous</a> function. The trigger signal will inform V-REP to execute the next simulation step (i.e. to call <a href="regularApi/simHandleMainScript.htm">simHandleMainScript</a>). While in synchronous operation mode, the client application is in charge of triggering the next simulation step, otherwise simulation will stall. See also <a href="remoteApiModusOperandi.htm#synchronous">this section</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div>-</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>













<h3 class=subsectionBar>
<a name="simRosTransferFile" id="simRosTransferFile"></a>simRosTransferFile (remote API equivalent: <a href="remoteApiFunctions.htm#simxTransferFile">simxTransferFile</a>)
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Allows transferring a file from the client to the server. See also <a href="#simRosEraseFile">simRosEraseFile</a>. </td>
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftIn>Input</td> 
<td class=rosApiTableRightIn>
<div><strong>data (uint8[])</strong>: the file content (i.e. its data)</div>
<div><strong>fileName (string)</strong>: a file name under which the transferred file will be saved on the server side. For now, do not specify a path (the file will be saved in the V-REP directory)</div>

</td> 
</tr> 
<tr class=apiTableTr> 
<td class=rosApiTableLeftOut>
Output
</td> 
<td class=rosApiTableRightOut>
<div><strong>result (int32)</strong>: -1 if operation was not successful</div>
</td> 
</tr> 
</table> 
<br>


















<br>
<br>
</td>
</tr>
</table> 
</div>  
  
  
</body>

</html>
