<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>simGetMpConfigTransition</title>
<link rel="stylesheet" type="text/css" href="../../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../../index.html" TARGET="_top"><img src="../images/homeImg.png"></a></p>

<h1><a href="../apiOverview.htm">Regular API</a> function</h1>
<h3 class=subsectionBar><a name="simGetMpConfigTransition" id="simGetMpConfigTransition"></a>simGetMpConfigTransition (DEPRECATED)</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>DEPRECATED. See the <a href="../pathAndMotionPlanningModules.htm">OMPL library based path/motion planning functionality</a> instead.<br><br>Searches for a collision-free path leading a serial manipulator from a start configuration to a goal configuration, by trying to follow a predefined path in the Cartesian space. This is useful for redundant manipulators, but also for safely driving  non-redundant manipulators via IK through a singular configuration. The function uses V-REP's <a href="../oldMotionPlanningModule.htm">motion planning functionality</a>. The first time this function is called on the given motion planning object, a preprocessing stage will prepare a calculation structure. This might take a few seconds depending mainly on the number of phase1 nodes. See also <a href="simGetConfigForTipPose.htm">simGetConfigForTipPose</a>, <a href="simFindMpPath.htm">simFindMpPath</a>, <a href="simGenerateIkPath.htm">simGenerateIkPath</a> and <a href="simCheckIkGroup.htm">simCheckIkGroup</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCSyn>
C synopsis
</td> 
<td class=apiTableRightCSyn>simFloat* simGetMpConfigTransition(simInt motionPlanningObjectHandle,const simFloat* startConfig,const simFloat* goalConfig,simInt options,const simInt* select,simFloat calcStepSize,simFloat maxOutStepSize,simInt wayPointCnt,const simFloat* wayPoints,simInt* outputConfigsCnt,const simInt* auxIntParams,const simFloat* auxFloatParams)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCParam>C parameters</td> 
<td class=apiTableRightCParam>
<div><strong>motionPlanningObjectHandle</strong>: the handle of a motion planning object. Refer to <a href="simGetMotionPlanningHandle.htm">simGetMotionPlanningHandle</a>.</div>
<div><strong>startConfig</strong>: the start or initial configuration of the robot (i.e. its joint positions). Should contain x values where x is the number of DoFs of the specified motion planning task.</div>
<div><strong>goalConfig</strong>:  the goal configuration of the robot (i.e. its joint positions). Should contain x values where x is the number of DoFs of the specified motion planning task. You can use <a href="simGetConfigForTipPose.htm">simGetConfigForTipPose</a> if the goal configuration is not known.</div>
<div><strong>options</strong>: bit-coded:</div>
<div class=tab>bit0 (1): reserved. Keep unset.</div>
<div class=tab>bit1 (2):  reserved. Keep unset.</div>
<div class=tab>bit2: if set (4), then the found path will be visualized in yellow.</div>
<div class=tab>bit3: if set (8), then some information will be output to the console.</div>
<div class=tab>bit4: if set (16), then robot self-interferences will be ignored and calculations can drastically be sped-up.</div>
<div class=tab>bit5: if set (32), then robot-environment interferences will be ignored and calculations can drastically be sped-up.</div>
<div class=tab>bit6 (64): reserved. Keep unset.</div>
<div class=tab>bit7 (128): reserved. Keep unset.</div>
<div class=tab>bit8: if set (256), then the returned Cartesian space distances will ignore the orientational distance component.</div>
<div class=tab>bit9: if set (512), then the specified waypoints will be followed by the end-effector in the Cartesian space. For that to happen, IK will be used too. If no waypoints are specified, then the end-effector will link the start to the goal configuration via a straight path in the Cartesian space.</div>

<div><strong>select</strong>: an optional array that describes the behaviour of specific joints during the operation, when bit9 of <strong>options</strong> is set. Can be NULL, in which case all joints are treated equally. The first value in the array indicates how many joint behaviour descriptions will follow. Then, joint behaviour descriptions are appended, with 2 values per joint:</div>
<div class=tab>value 1: a joint handle.</div>
<div class=tab>value 2: a value indicating how the joint will be handled during the path search operation:</div>
<div class=tabTab>0: the joint will be fixed, i.e. perform an exact interpolation between the start and goal configuration.</div>
<div class=tabTab>1-7: the weight of the joint during the IK operations: 1=weight is 0.5, 2=weight is 0.25, 3=weight is 0.1, 4=weight is 0.05, 5=weight is 0.025, 6=weight is 0.01, and 7=weight is 0.001</div>
<div>A good strategy for redundant manipulators with redundancy level n, is to fix n joints, if resolution is not successful by keeping the select argument NULL.</div>
<div><strong>calcStepSize</strong>: the maximum configuration space distance between individual collision-free phase2 nodes, during the interpolation phase. A distance calculation will use the weight specified for each joint in the <a href="../oldMotionPlanningDialog.htm">motion planning properties</a>.</div>
<div><strong>maxOutCalcStepSize</strong>: the maximum configuration space distance between individual collision-free phase2 nodes, after the IK calculation phase. Keep this distance larger than <strong>calcStepSize</strong>. A distance calculation will use the weight specified for each joint in the <a href="../oldMotionPlanningDialog.htm">motion planning properties</a>.</div>

<div><strong>wayPointCnt</strong>: the number of provided waypoints. Providing waypoints is optional, and only makes sense if bit9 of <strong>options</strong> is set. If no waypoints are provided, this should be 0. Otherwise this should be at least 2.</div>
<div><strong>wayPoints</strong>: an array that contains optional waypoints. If no waypoints are provided, this should be NULL. For n waypoints, this array should contain n*7 values: for each waypoint, provide the x,y,z coordinates, and the quaternion values (qx,qy,qz,qw).</div>
<div><strong>outputConfigsCnt</strong>: a pointer to an integer receiving the number of returned configurations. If a single configuration is returned, this means that the specified start and goal configurations are coincident.</div>
<div><strong>auxIntParams</strong>: reserved. Keep NULL.</div>
<div><strong>auxFloatParams</strong>: reserved. Keep NULL.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCRet>
C return value
</td> 
<td class=apiTableRightCRet>
<div>NULL in case of an error, or when the search failed. Otherwise a buffer of float values that the user is in charge of releasing with <a href="simReleaseBuffer.htm">simReleaseBuffer</a>. The returned buffer contains:</div>
<div class=tab><strong>the found path</strong> (x*n values): n configurations with each x values (x is the number of DoFs of the specified motion planning task). The configurations will include the start and the goal configuration, except when start and goal are coincident, in which case a single configuration is returned.</div>
<div class=tab><strong>the configuration space distances</strong> (n values): for each returned configuration, a distance to the start configuration (following the path). The last of the n values represents the length of the found path in the configuration space. The distance is calculated using the weight specified for each joint in the <a href="../oldMotionPlanningDialog.htm">motion planning properties</a>.</div>
<div class=tab><strong>the end-effector positions</strong> (3*n values): for each returned configuration, the position of the corresponding end-effector (x, y, z).</div>
<div class=tab><strong>the end-effector quaternions</strong> (4*n values): for each returned configuration, the quaternion of the corresponding end-effector (x, y, z, w).</div>
<div class=tab><strong>the Cartesian space distances</strong> (n values): for each returned configuration, a distance to the start pose (following the path). The last of the n values represents the length of the found path in the Cartesian space. The distance is calculated using the Cartesian space metric specified in the <a href="../oldMotionPlanningDialog.htm">motion planning properties</a>.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua synopsis
</td> 
<td class=apiTableRightLSyn>table path,table confSpaceLengths,table_3 tipPositions,table_4 tipQuaternions,table cartesianSpaceLengths=simGetMpConfigTransition(number motionPlanningObjectHandle,table startConfig,table goalConfig,number options,table select,number calcStepSize,number maxOutStepSize,table wayPoints=nil)</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua parameters</td> 
<td class=apiTableRightLParam>
<div>Similar as C-function, except that the <strong>select</strong> table (if not nil) should not contain the first element that is required in the C-function</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua return values
</td> 
<td class=apiTableRightLRet>
<div>Similar as C-function</div>
</td> 
</tr> 
</table> 

<br>
<p><a href="../apiFunctions.htm">All regular API functions on one page</a></p>
<br>
<br>
</td>
</tr>
</table>
</div>
</body>
</html>
