<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>RosPlugin publishers</title>
<link rel="stylesheet" type="text/css" href="../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../index.html" TARGET="_top"><img src="images/homeImg.png"></a></p>



<h1><a href="rosInterfaceOverview.htm">RosPlugin</a> publishers</h1>

<a name="dataStreamingInfo" id="dataStreamingInfo"></a>

<p>While <a href="rosServices.htm">RosPlugin services in V-REP</a> are enabled as soon as V-REP starts (given that ROSCORE was running at that time), <a href="rosPublisherTypes.htm">RosPlugin topic publishing and data streaming</a> happens only on demand (i.e. publishers need to be individually enabled). Moreover, this can only happen while a simulation is running (one exception to this is the <a href="rosPublisherTypes.htm#simros_strmcmd_get_info">topic <em>info</em></a>: data will be streamed to that topic as long as V-REP is running).</p>
<p>V-REP offers two equivalent means of enabling and disabling RosPlugin publishers: via the <a href="rosServices.htm#simRosEnablePublisher">simRosEnablePublisher</a> and <a href="rosServices.htm#simRosDisablePublisher">simRosDisablePublisher</a> services, or via <a href="#customLuaCmds">custom Lua commands</a> that can be used from within a <a href="scripts.htm">script</a>. In either case a topic name, a command ID and 3 <strong>enabling parameters</strong> need to be provided:</p>
<li>The topic name will be the string under which data will be streamed (e.g. &quot;robotPosition&quot;)</li>
<li>The command ID (hereafter streamCmd) specifies  the type of data that we wish to be streamed (e.g. <a href="rosPublisherTypes.htm#simros_strmcmd_get_object_pose">simros_strmcmd_get_object_pose</a> if we wish to stream an object's position &amp; orientation)</li>
<li>The 3 enabling parameters fully specify the item whose data we wish to stream (e.g. if we require to stream the joint position of a joint object, then one enabling parameter will be the object handle, while the 2 other parameters will not be used. The first 2 parameters are integer values, the third parameter is a string value. Most of the time only one parameter is required for a streamCmd, sometimes none, and othertimes 2.</li>

<p>If you wish to activate/deactivate data streaming via a Lua script, then following 3 functions will be needed:</p>



<a name="customLuaCmds" id="customLuaCmds"></a>
<h3 class=tab><a name="simExtROS_enablePublisher" id="simExtROS_enablePublisher"></a>simExtROS_enablePublisher</h3>
<table class=apiTableTab>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>
Enables a publisher (i.e. V-REP will be streaming data on a specific topic). Publishers can only be enabled while simulation is running.  If a same publisher (i.e. of the same type and applied to the same item) was already enabled previously, then a reference counter will be incremented and the topic name of that publisher is returned. Publishers can be disabled with <a href="#simExtROS_disablePublisher">simExtROS_disablePublisher</a>. At simulation end, all publishers are automatically disabled. A publisher can also be enabled using following ROS service: <a href="rosServices.htm#simRosEnablePublisher">simRosEnablePublisher</a>. See also <a href="rosSubscribers.htm#simExtROS_enableSubscriber">simExtROS_enableSubscriber</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua synopsis
</td> 
<td class=apiTableRightLSyn>string effectiveTopicName=simExtROS_enablePublisher(string topicName,number queueSize,number streamCmd,number auxInt1,number auxInt2,string auxString,number publishCnt=0)<br></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua parameters</td> 
<td class=apiTableRightLParam>
<div><strong>topicName</strong>: the desired topic name</div>
<div><strong>queueSize</strong>: the desired queue size</div>
<div><strong>streamCmd</strong>: the desired <a href="rosPublisherTypes.htm">type of data to stream</a></div>
<div><strong>auxInt1</strong>: the first enabling parameter.</div>
<div><strong>auxInt2</strong>: the second enabling parameter</div>
<div><strong>auxString</strong>: the third enabling parameter</div>
<div><strong>publishCnt</strong>: the number of times you wish to publish the data, before going to sleep. Specify -1 to start in sleep mode, 0 for an unlimited number of publishing, and <em>n</em> to publish exactly <em>n</em> times the data. Can be omitted, in which case 0 is used. See also <a href="#simExtROS_wakePublisher">simExtROS_wakePublisher</a>.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua return values
</td> 
<td class=apiTableRightLRet>
<div><strong>effectiveTopicName</strong>: the effective topic name that will be used to stream the desired data, or nil if there was an error. If the desired topic name is already in use for another type of publisher, then a new topic name is generated (i.e. &quot;_2&quot; appended). If the desired publisher is already enabled, then the topic name of that existing publisher is returned</div>
<div></div></td> 
</tr> 
</table> 
<br>








<h3 class=tab><a name="simExtROS_disablePublisher" id="simExtROS_disablePublisher"></a>simExtROS_disablePublisher</h3>
<table class=apiTableTab>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>
Disables a publisher (i.e. V-REP will stop streaming data on  a specific topic) previously enabled with <a href="#simExtROS_enablePublisher">simExtROS_enablePublisher</a>. If a same publisher was enabled several times (e.g. from different nodes), then this command will only decrement a reference counter (a publisher is effectively disabled when its reference counter reaches zero). At simulation end, all publishers are automatically disabled. A publisher can also be disabled using following ROS service: <a href="rosServices.htm#simRosDisablePublisher">simRosDisablePublisher</a>. See also <a href="rosSubscribers.htm#simExtROS_disableSubscriber">simExtROS_disableSubscriber</a>.</td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua synopsis
</td> 
<td class=apiTableRightLSyn>number referenceCounter=simExtROS_disablePublisher(string topicName)<br></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua parameters</td> 
<td class=apiTableRightLParam>
<div><strong>topicName</strong>: the topic name previously returned by <a href="#simExtROS_enablePublisher">simExtROS_enablePublisher</a>.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua return values
</td> 
<td class=apiTableRightLRet>
<div><strong>referenceCounter</strong>: the value of the reference counter. If the counter is &gt;0, then the publisher is still enabled. If the counter is 0, then the publisher was just disabled. If referenceCounter is -1, there was an error.</div>
<div></div></td> 
</tr> 
</table> 
<br>














<h3 class=tab><a name="simExtROS_wakePublisher" id="simExtROS_wakePublisher"></a>simExtROS_wakePublisher</h3>
<table class=apiTableTab>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>
Wakes up a publisher, puts it to sleep, or queries its publish count state. The publisher must previously have been enabled with  <a href="#simExtROS_enablePublisher">simExtROS_enablePublisher</a>. </td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua synopsis
</td> 
<td class=apiTableRightLSyn>number result=simExtROS_wakePublisher(string topicName,number publishCnt)<br></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua parameters</td> 
<td class=apiTableRightLParam>
<div><strong>topicName</strong>: the topic name previously returned by <a href="#simExtROS_enablePublisher">simExtROS_enablePublisher</a>.</div>
<div><strong>publishCnt</strong>: the number of times you wish to publish the data, before going to sleep. Specify -1 to put the publisher to sleep, 0 for an unlimited number of publishing, and <em>n</em> to publish exactly <em>n</em> times the data. Specify -2 to query the current publish count state.</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua return values
</td> 
<td class=apiTableRightLRet>
<div><strong>result</strong>: -1 if there was an error, or n, the current publish count state if <strong>publishCnt</strong> argument was -2.</div>
<div></div></td> 
</tr> 
</table> 
<br>














<p>As an example, imagine you wish to activate streaming of the pose of object &quot;myObject&quot; under the topic name &quot;myObjectPose&quot;, then, you could write following code in a Lua script:</p>


 <pre class=lightRedBox>
local handle=simGetObjectHandle('myObject')
local effectiveTopicName=simExtROS_enablePublisher('myObjectPose',1,
                            simros_strmcmd_get_object_pose,handle,-1,'')</pre>


<p>The above example can also be executed directly in the console:</p>

<pre class=lightGreyBox>
$ rosservice call vrep/simRosGetObjectHandle 'myObject'
handle: 5
$ rosservice call vrep/simRosEnablePublisher 'myObjectPose' 1 8193 5 -- -1 ''
effectiveTopicName: myObjectPose</pre>

<p>The first line retrieves the object handle (i.e. 5), and the second line enables streaming of the desired data. '8193' is the value of the variable simros_strmcmd_get_object_pose defined in the file 'programming/include/v_repConst.h'</p>
<p>To check if the data is effectively streaming, try one of following two lines:</p>

<pre class=lightGreyBox>
$ rostopic list
$ rostopic echo myObjectPose</pre>

<br>

<p>You can also have V-REP act as publisher and subscriber at the same time. For instance, following code (to be executed just once at simulation start) will automatically match object &quot;myObject2&quot;'s pose with the pose of &quot;myObject1&quot;, as long as the simulation is running:</p>


 <pre class=lightRedBox>
local object1Handle=simGetObjectHandle('myObject1')
local effectiveTopicName=simExtROS_enablePublisher('myObjectPose',1,
                            simros_strmcmd_get_object_pose,object1Handle,-1,'')

local object2Handle=simGetObjectHandle('myObject2')
local subscriberID=simExtROS_enableSubscriber(effectiveTopicName,1,
                            simros_strmcmd_set_object_pose,object2Handle,-1,'')</pre>





<br>
<h3 class=recommendedTopics>Recommended topics</h3>
<li><a href="rosPublisherTypes.htm">RosPlugin  publisher types</a></li>
<li><a href="rosSubscribers.htm">RosPlugin subscribers</a></li>
<li><a href="rosServices.htm">RosPlugin services</a></li>



<br>
<br>
</td>
</tr>
</table> 
</div>  
  
  
</body>

</html>
